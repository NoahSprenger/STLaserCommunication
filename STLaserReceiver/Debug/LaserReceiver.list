
LaserReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007244  08007244  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800724c  0800724c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000084  080072e0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080072e0  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014946  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d43  00000000  00000000  000349fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00037740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b473  00000000  00000000  00039a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f99  00000000  00000000  00064e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9fb3  00000000  00000000  00078e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00172e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f50 	.word	0x08006f50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08006f50 	.word	0x08006f50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_ZN13GenericDriverD1Ev>:

    /// Constructor
    GenericDriver();

    /// Generic destructor to prevent warnings when objects are dynamically allocated
    virtual ~GenericDriver() {};
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <_ZN13GenericDriverD1Ev+0x1c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	08007030 	.word	0x08007030

080005a4 <_ZN13GenericDriverD0Ev>:
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff ffe9 	bl	8000584 <_ZN13GenericDriverD1Ev>
 80005b2:	2120      	movs	r1, #32
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f005 fc34 	bl	8005e22 <_ZdlPvj>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_ZN3ASKC1Ethhhb>:
};

// This is the value of the start symbol after 6-bit conversion and nybble swapping
#define ASK_START_SYMBOL 0xb38

ASK::ASK(uint16_t speed, uint8_t rxPin, uint8_t txPin, uint8_t pttPin, bool pttInverted)
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	4608      	mov	r0, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	461a      	mov	r2, r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	460b      	mov	r3, r1
 80005d8:	707b      	strb	r3, [r7, #1]
 80005da:	4613      	mov	r3, r2
 80005dc:	703b      	strb	r3, [r7, #0]
    _speed(speed),
    _rxPin(rxPin),
    _txPin(txPin),
    _pttPin(pttPin),
    _rxInverted(false),
    _pttInverted(pttInverted)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fd59 	bl	8001098 <_ZN13GenericDriverC1Ev>
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <_ZN3ASKC1Ethhhb+0x80>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	887a      	ldrh	r2, [r7, #2]
 80005f0:	841a      	strh	r2, [r3, #32]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	787a      	ldrb	r2, [r7, #1]
 80005f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	783a      	ldrb	r2, [r7, #0]
 80005fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7e3a      	ldrb	r2, [r7, #24]
 8000606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	7f3a      	ldrb	r2, [r7, #28]
 8000616:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
{
    // Initialise the first 8 nibbles of the tx buffer to be the standard
    // preamble. We will append messages after that. 0x38, 0x2c is the start symbol before
    // 6-bit conversion to RH_ASK_START_SYMBOL
    uint8_t preamble[ASK_PREAMBLE_LEN] = {0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x38, 0x2c};
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <_ZN3ASKC1Ethhhb+0x84>)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000624:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(_txBuf, preamble, sizeof(preamble));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3379      	adds	r3, #121	; 0x79
 800062c:	461a      	mov	r2, r3
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	cb03      	ldmia	r3!, {r0, r1}
 8000634:	6010      	str	r0, [r2, #0]
 8000636:	6051      	str	r1, [r2, #4]
}
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08006fb0 	.word	0x08006fb0
 8000648:	08006f68 	.word	0x08006f68

0800064c <_ZN3ASK4initEv>:

bool ASK::init()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    if (!GenericDriver::init())
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd4c 	bl	80010f4 <_ZN13GenericDriver4initEv>
 800065c:	4603      	mov	r3, r0
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <_ZN3ASK4initEv+0x20>
	return false;
 8000668:	2300      	movs	r3, #0
 800066a:	e006      	b.n	800067a <_ZN3ASK4initEv+0x2e>
    thisASKDriver = this;
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <_ZN3ASK4initEv+0x38>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
//    pinMode(_txPin, OUTPUT);
//    pinMode(_rxPin, INPUT);
//    pinMode(_pttPin, OUTPUT);

    // Ready to go
    setModeIdle();
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f808 	bl	8000688 <_ZN3ASK11setModeIdleEv>
//    timerSetup(); // should be handled by main.c

    return true;
 8000678:	2301      	movs	r3, #1
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000a0 	.word	0x200000a0

08000688 <_ZN3ASK11setModeIdleEv>:
////    timer.setCaptureCompare(1, us - 1, MICROSEC_COMPARE_FORMAT);
////    timer.attachInterrupt(interrupt); // should be attached in main.c
//}

void INTERRUPT_ATTR ASK::setModeIdle()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    if (_mode != ModeIdle)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b02      	cmp	r3, #2
 8000698:	bf14      	ite	ne
 800069a:	2301      	movne	r3, #1
 800069c:	2300      	moveq	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00d      	beq.n	80006c0 <_ZN3ASK11setModeIdleEv+0x38>
    {
	// Disable the transmitter hardware
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f002 fa62 	bl	8002b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <_ZN3ASK11setModeIdleEv+0x40>)
 80006b6:	f002 fa5d 	bl	8002b74 <HAL_GPIO_WritePin>
		_mode = ModeIdle;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2202      	movs	r2, #2
 80006be:	711a      	strb	r2, [r3, #4]
    }
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	48000400 	.word	0x48000400

080006cc <_ZN3ASK9setModeTxEv>:

void ASK::setModeTx()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    if (_mode != ModeTx)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b03      	cmp	r3, #3
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d013      	beq.n	8000710 <_ZN3ASK9setModeTxEv+0x44>
    {
	// PRepare state varibles for a new transmission
	_txIndex = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	_txBit = 0;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	_txSample = 0;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	// Enable the transmitter hardware
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <_ZN3ASK9setModeTxEv+0x4c>)
 8000706:	f002 fa35 	bl	8002b74 <HAL_GPIO_WritePin>

	_mode = ModeTx;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2203      	movs	r2, #3
 800070e:	711a      	strb	r2, [r3, #4]
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	48000400 	.word	0x48000400

0800071c <_ZN3ASK9setModeRxEv>:

void ASK::setModeRx() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if (_mode != ModeRx) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b04      	cmp	r3, #4
 800072c:	bf14      	ite	ne
 800072e:	2301      	movne	r3, #1
 8000730:	2300      	moveq	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00d      	beq.n	8000754 <_ZN3ASK9setModeRxEv+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <_ZN3ASK9setModeRxEv+0x40>)
 800073e:	f002 fa19 	bl	8002b74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f002 fa13 	bl	8002b74 <HAL_GPIO_WritePin>
		_mode = ModeRx;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2204      	movs	r2, #4
 8000752:	711a      	strb	r2, [r3, #4]
	}
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	48000400 	.word	0x48000400

08000760 <_ZN3ASK9availableEv>:

// Call this often
bool ASK::available()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    if (_mode == ModeTx)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b03      	cmp	r3, #3
 8000770:	bf0c      	ite	eq
 8000772:	2301      	moveq	r3, #1
 8000774:	2300      	movne	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <_ZN3ASK9availableEv+0x20>
	return false;
 800077c:	2300      	movs	r3, #0
 800077e:	e013      	b.n	80007a8 <_ZN3ASK9availableEv+0x48>
    setModeRx();
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ffcb 	bl	800071c <_ZN3ASK9setModeRxEv>
    if (_rxBufFull)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d006      	beq.n	80007a0 <_ZN3ASK9availableEv+0x40>
    {
	validateRxBuf();
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 fa12 	bl	8000bbc <_ZN3ASK13validateRxBufEv>
	_rxBufFull= false;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    }
    return _rxBufValid;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007a6:	b2db      	uxtb	r3, r3
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZN3ASK4recvEPhS0_>:

bool INTERRUPT_ATTR ASK::recv(uint8_t* buf, uint8_t* len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
    if (!available())
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	330c      	adds	r3, #12
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	4798      	blx	r3
 80007c8:	4603      	mov	r3, r0
 80007ca:	f083 0301 	eor.w	r3, r3, #1
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZN3ASK4recvEPhS0_+0x28>
	return false;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e021      	b.n	800081c <_ZN3ASK4recvEPhS0_+0x6c>

    if (buf && len)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d019      	beq.n	8000812 <_ZN3ASK4recvEPhS0_+0x62>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d016      	beq.n	8000812 <_ZN3ASK4recvEPhS0_+0x62>
    {
	// Skip the length and 4 headers that are at the beginning of the rxBuf
	// and drop the trailing 2 bytes of FCS
	uint8_t message_len = _rxBufLen-ASK_HEADER_LEN - 3;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	3b07      	subs	r3, #7
 80007ee:	75fb      	strb	r3, [r7, #23]
	if (*len > message_len)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	7dfa      	ldrb	r2, [r7, #23]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d202      	bcs.n	8000800 <_ZN3ASK4recvEPhS0_+0x50>
	    *len = message_len;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7dfa      	ldrb	r2, [r7, #23]
 80007fe:	701a      	strb	r2, [r3, #0]
	memcpy(buf, _rxBuf+ASK_HEADER_LEN+1, *len);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3331      	adds	r3, #49	; 0x31
 8000804:	1d59      	adds	r1, r3, #5
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	68b8      	ldr	r0, [r7, #8]
 800080e:	f005 fb61 	bl	8005ed4 <memcpy>
    }
    _rxBufValid = false; // Got the most recent message, delete it
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
//    printBuffer("recv:", buf, *len);
    return true;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZN3ASK4sendEPKhh>:

// Caution: this may block
bool ASK::send(const uint8_t* data, uint8_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    uint16_t index = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	83bb      	strh	r3, [r7, #28]
    uint16_t crc = 0xffff;
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	837b      	strh	r3, [r7, #26]
    uint8_t *p = _txBuf + ASK_PREAMBLE_LEN; // start of the message area
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3379      	adds	r3, #121	; 0x79
 8000840:	3308      	adds	r3, #8
 8000842:	617b      	str	r3, [r7, #20]
    uint8_t count = len + 3 + ASK_HEADER_LEN; // Added byte count and FCS and headers to get total number of bytes
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	3307      	adds	r3, #7
 8000848:	74fb      	strb	r3, [r7, #19]

    if (len > ASK_MAX_MESSAGE_LEN)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b3c      	cmp	r3, #60	; 0x3c
 800084e:	d901      	bls.n	8000854 <_ZN3ASK4sendEPKhh+0x30>
	return false;
 8000850:	2300      	movs	r3, #0
 8000852:	e13d      	b.n	8000ad0 <_ZN3ASK4sendEPKhh+0x2ac>

    // Wait for transmitter to become available
    waitPacketSent();
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3320      	adds	r3, #32
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4610      	mov	r0, r2
 8000860:	4798      	blx	r3

    if (!waitCAD())
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	332c      	adds	r3, #44	; 0x2c
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4610      	mov	r0, r2
 800086e:	4798      	blx	r3
 8000870:	4603      	mov	r3, r0
 8000872:	f083 0301 	eor.w	r3, r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN3ASK4sendEPKhh+0x5c>
	return false;  // Check channel activity
 800087c:	2300      	movs	r3, #0
 800087e:	e127      	b.n	8000ad0 <_ZN3ASK4sendEPKhh+0x2ac>

    // Encode the message length
    crc = crc_ccitt_update(crc, count);
 8000880:	7cfa      	ldrb	r2, [r7, #19]
 8000882:	8b7b      	ldrh	r3, [r7, #26]
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fbd3 	bl	8001032 <_Z16crc_ccitt_updateth>
 800088c:	4603      	mov	r3, r0
 800088e:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[count >> 4];
 8000890:	7cfb      	ldrb	r3, [r7, #19]
 8000892:	091b      	lsrs	r3, r3, #4
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4619      	mov	r1, r3
 8000898:	8bbb      	ldrh	r3, [r7, #28]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	83ba      	strh	r2, [r7, #28]
 800089e:	461a      	mov	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	4413      	add	r3, r2
 80008a4:	4a8c      	ldr	r2, [pc, #560]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 80008a6:	5c52      	ldrb	r2, [r2, r1]
 80008a8:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[count & 0xf];
 80008aa:	7cfb      	ldrb	r3, [r7, #19]
 80008ac:	f003 020f 	and.w	r2, r3, #15
 80008b0:	8bbb      	ldrh	r3, [r7, #28]
 80008b2:	1c59      	adds	r1, r3, #1
 80008b4:	83b9      	strh	r1, [r7, #28]
 80008b6:	4619      	mov	r1, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	440b      	add	r3, r1
 80008bc:	4986      	ldr	r1, [pc, #536]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 80008be:	5c8a      	ldrb	r2, [r1, r2]
 80008c0:	701a      	strb	r2, [r3, #0]

    // Encode the headers
    crc = crc_ccitt_update(crc, _txHeaderTo);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7ada      	ldrb	r2, [r3, #11]
 80008c6:	8b7b      	ldrh	r3, [r7, #26]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fbb1 	bl	8001032 <_Z16crc_ccitt_updateth>
 80008d0:	4603      	mov	r3, r0
 80008d2:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderTo >> 4];
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	7adb      	ldrb	r3, [r3, #11]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	8bbb      	ldrh	r3, [r7, #28]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	83ba      	strh	r2, [r7, #28]
 80008e4:	461a      	mov	r2, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a7b      	ldr	r2, [pc, #492]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 80008ec:	5c52      	ldrb	r2, [r2, r1]
 80008ee:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderTo & 0xf];
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	7adb      	ldrb	r3, [r3, #11]
 80008f4:	f003 020f 	and.w	r2, r3, #15
 80008f8:	8bbb      	ldrh	r3, [r7, #28]
 80008fa:	1c59      	adds	r1, r3, #1
 80008fc:	83b9      	strh	r1, [r7, #28]
 80008fe:	4619      	mov	r1, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	440b      	add	r3, r1
 8000904:	4974      	ldr	r1, [pc, #464]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000906:	5c8a      	ldrb	r2, [r1, r2]
 8000908:	701a      	strb	r2, [r3, #0]
    crc = crc_ccitt_update(crc, _txHeaderFrom);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	7b1a      	ldrb	r2, [r3, #12]
 800090e:	8b7b      	ldrh	r3, [r7, #26]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fb8d 	bl	8001032 <_Z16crc_ccitt_updateth>
 8000918:	4603      	mov	r3, r0
 800091a:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderFrom >> 4];
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	7b1b      	ldrb	r3, [r3, #12]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	8bbb      	ldrh	r3, [r7, #28]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	83ba      	strh	r2, [r7, #28]
 800092c:	461a      	mov	r2, r3
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	4413      	add	r3, r2
 8000932:	4a69      	ldr	r2, [pc, #420]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000934:	5c52      	ldrb	r2, [r2, r1]
 8000936:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderFrom & 0xf];
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	7b1b      	ldrb	r3, [r3, #12]
 800093c:	f003 020f 	and.w	r2, r3, #15
 8000940:	8bbb      	ldrh	r3, [r7, #28]
 8000942:	1c59      	adds	r1, r3, #1
 8000944:	83b9      	strh	r1, [r7, #28]
 8000946:	4619      	mov	r1, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	440b      	add	r3, r1
 800094c:	4962      	ldr	r1, [pc, #392]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 800094e:	5c8a      	ldrb	r2, [r1, r2]
 8000950:	701a      	strb	r2, [r3, #0]
    crc = crc_ccitt_update(crc, _txHeaderId);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	7b5a      	ldrb	r2, [r3, #13]
 8000956:	8b7b      	ldrh	r3, [r7, #26]
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fb69 	bl	8001032 <_Z16crc_ccitt_updateth>
 8000960:	4603      	mov	r3, r0
 8000962:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderId >> 4];
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	7b5b      	ldrb	r3, [r3, #13]
 8000968:	091b      	lsrs	r3, r3, #4
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	8bbb      	ldrh	r3, [r7, #28]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	83ba      	strh	r2, [r7, #28]
 8000974:	461a      	mov	r2, r3
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	4a57      	ldr	r2, [pc, #348]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 800097c:	5c52      	ldrb	r2, [r2, r1]
 800097e:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderId & 0xf];
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	7b5b      	ldrb	r3, [r3, #13]
 8000984:	f003 020f 	and.w	r2, r3, #15
 8000988:	8bbb      	ldrh	r3, [r7, #28]
 800098a:	1c59      	adds	r1, r3, #1
 800098c:	83b9      	strh	r1, [r7, #28]
 800098e:	4619      	mov	r1, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	440b      	add	r3, r1
 8000994:	4950      	ldr	r1, [pc, #320]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000996:	5c8a      	ldrb	r2, [r1, r2]
 8000998:	701a      	strb	r2, [r3, #0]
    crc = crc_ccitt_update(crc, _txHeaderFlags);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	7b9a      	ldrb	r2, [r3, #14]
 800099e:	8b7b      	ldrh	r3, [r7, #26]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fb45 	bl	8001032 <_Z16crc_ccitt_updateth>
 80009a8:	4603      	mov	r3, r0
 80009aa:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[_txHeaderFlags >> 4];
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7b9b      	ldrb	r3, [r3, #14]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4619      	mov	r1, r3
 80009b6:	8bbb      	ldrh	r3, [r7, #28]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	83ba      	strh	r2, [r7, #28]
 80009bc:	461a      	mov	r2, r3
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 80009c4:	5c52      	ldrb	r2, [r2, r1]
 80009c6:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[_txHeaderFlags & 0xf];
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	7b9b      	ldrb	r3, [r3, #14]
 80009cc:	f003 020f 	and.w	r2, r3, #15
 80009d0:	8bbb      	ldrh	r3, [r7, #28]
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	83b9      	strh	r1, [r7, #28]
 80009d6:	4619      	mov	r1, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	440b      	add	r3, r1
 80009dc:	493e      	ldr	r1, [pc, #248]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 80009de:	5c8a      	ldrb	r2, [r1, r2]
 80009e0:	701a      	strb	r2, [r3, #0]

    // Encode the message into 6 bit symbols. Each byte is converted into
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	77fb      	strb	r3, [r7, #31]
 80009e6:	7ffa      	ldrb	r2, [r7, #31]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d22d      	bcs.n	8000a4a <_ZN3ASK4sendEPKhh+0x226>
    {
	crc = crc_ccitt_update(crc, data[i]);
 80009ee:	7ffb      	ldrb	r3, [r7, #31]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	4413      	add	r3, r2
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	8b7b      	ldrh	r3, [r7, #26]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fb19 	bl	8001032 <_Z16crc_ccitt_updateth>
 8000a00:	4603      	mov	r3, r0
 8000a02:	837b      	strh	r3, [r7, #26]
	p[index++] = symbols[data[i] >> 4];
 8000a04:	7ffb      	ldrb	r3, [r7, #31]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	091b      	lsrs	r3, r3, #4
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	8bbb      	ldrh	r3, [r7, #28]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	83ba      	strh	r2, [r7, #28]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a2e      	ldr	r2, [pc, #184]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a20:	5c52      	ldrb	r2, [r2, r1]
 8000a22:	701a      	strb	r2, [r3, #0]
	p[index++] = symbols[data[i] & 0xf];
 8000a24:	7ffb      	ldrb	r3, [r7, #31]
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	f003 020f 	and.w	r2, r3, #15
 8000a30:	8bbb      	ldrh	r3, [r7, #28]
 8000a32:	1c59      	adds	r1, r3, #1
 8000a34:	83b9      	strh	r1, [r7, #28]
 8000a36:	4619      	mov	r1, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	440b      	add	r3, r1
 8000a3c:	4926      	ldr	r1, [pc, #152]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a3e:	5c8a      	ldrb	r2, [r1, r2]
 8000a40:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++)
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	3301      	adds	r3, #1
 8000a46:	77fb      	strb	r3, [r7, #31]
 8000a48:	e7cd      	b.n	80009e6 <_ZN3ASK4sendEPKhh+0x1c2>
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
 8000a4a:	8b7b      	ldrh	r3, [r7, #26]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	837b      	strh	r3, [r7, #26]
    p[index++] = symbols[(crc >> 4)  & 0xf];
 8000a50:	8b7b      	ldrh	r3, [r7, #26]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f003 020f 	and.w	r2, r3, #15
 8000a5a:	8bbb      	ldrh	r3, [r7, #28]
 8000a5c:	1c59      	adds	r1, r3, #1
 8000a5e:	83b9      	strh	r1, [r7, #28]
 8000a60:	4619      	mov	r1, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	440b      	add	r3, r1
 8000a66:	491c      	ldr	r1, [pc, #112]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a68:	5c8a      	ldrb	r2, [r1, r2]
 8000a6a:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[crc & 0xf];
 8000a6c:	8b7b      	ldrh	r3, [r7, #26]
 8000a6e:	f003 020f 	and.w	r2, r3, #15
 8000a72:	8bbb      	ldrh	r3, [r7, #28]
 8000a74:	1c59      	adds	r1, r3, #1
 8000a76:	83b9      	strh	r1, [r7, #28]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	440b      	add	r3, r1
 8000a7e:	4916      	ldr	r1, [pc, #88]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a80:	5c8a      	ldrb	r2, [r1, r2]
 8000a82:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 12) & 0xf];
 8000a84:	8b7b      	ldrh	r3, [r7, #26]
 8000a86:	0b1b      	lsrs	r3, r3, #12
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	83ba      	strh	r2, [r7, #28]
 8000a92:	461a      	mov	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000a9a:	5c52      	ldrb	r2, [r2, r1]
 8000a9c:	701a      	strb	r2, [r3, #0]
    p[index++] = symbols[(crc >> 8)  & 0xf];
 8000a9e:	8b7b      	ldrh	r3, [r7, #26]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f003 020f 	and.w	r2, r3, #15
 8000aa8:	8bbb      	ldrh	r3, [r7, #28]
 8000aaa:	1c59      	adds	r1, r3, #1
 8000aac:	83b9      	strh	r1, [r7, #28]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	440b      	add	r3, r1
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <_ZN3ASK4sendEPKhh+0x2b4>)
 8000ab6:	5c8a      	ldrb	r2, [r1, r2]
 8000ab8:	701a      	strb	r2, [r3, #0]

    // Total number of 6-bit symbols to send
    _txBufLen = index + ASK_PREAMBLE_LEN;
 8000aba:	8bbb      	ldrh	r3, [r7, #28]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3308      	adds	r3, #8
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

    // Start the low level interrupt handler sending symbols
    setModeTx();
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fdff 	bl	80006cc <_ZN3ASK9setModeTxEv>

    return true;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000

08000adc <_ZN3ASK6readRxEv>:

// Read the RX data input pin, taking into account platform type and inversion.
bool INTERRUPT_ATTR ASK::readRx()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    bool value;
    value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f002 f82b 	bl	8002b44 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	73fb      	strb	r3, [r7, #15]
    return value ^ _rxInverted;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b00:	7bfa      	ldrb	r2, [r7, #15]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	bf14      	ite	ne
 8000b06:	2301      	movne	r3, #1
 8000b08:	2300      	moveq	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN3ASK7writeTxEb>:

// Write the TX output pin, taking into account platform type.
void INTERRUPT_ATTR ASK::writeTx(bool value)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
    if (value == true) {
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d106      	bne.n	8000b34 <_ZN3ASK7writeTxEb+0x20>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f002 f821 	bl	8002b74 <HAL_GPIO_WritePin>
    }
    else {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
    }
}
 8000b32:	e005      	b.n	8000b40 <_ZN3ASK7writeTxEb+0x2c>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f002 f81a 	bl	8002b74 <HAL_GPIO_WritePin>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN3ASK16maxMessageLengthEv>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}

uint8_t ASK::maxMessageLength()
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    return ASK_MAX_MESSAGE_LEN;
 8000b50:	233c      	movs	r3, #60	; 0x3c
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_ZN3ASK11symbol_6to4Eh>:

// Convert a 6 bit encoded symbol into its 4 bit decoded equivalent
uint8_t INTERRUPT_ATTR ASK::symbol_6to4(uint8_t symbol)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
    // Linear search :-( Could have a 64 byte reverse lookup table?
    // There is a little speedup here courtesy Ralph Doncaster:
    // The shortcut works because bit 5 of the symbol is 1 for the last 8
    // symbols, and it is 0 for the first 8.
    // So we only have to search half the table
    for (i = (symbol>>2) & 8, count=8; count-- ; i++)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	2308      	movs	r3, #8
 8000b7a:	73bb      	strb	r3, [r7, #14]
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	73ba      	strb	r2, [r7, #14]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00b      	beq.n	8000ba8 <_ZN3ASK11symbol_6to4Eh+0x48>
	if (symbol == symbols[i]) return i;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <_ZN3ASK11symbol_6to4Eh+0x58>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d101      	bne.n	8000ba0 <_ZN3ASK11symbol_6to4Eh+0x40>
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	e004      	b.n	8000baa <_ZN3ASK11symbol_6to4Eh+0x4a>
    for (i = (symbol>>2) & 8, count=8; count-- ; i++)
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
 8000ba6:	e7e9      	b.n	8000b7c <_ZN3ASK11symbol_6to4Eh+0x1c>

    return 0; // Not found
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000000 	.word	0x20000000

08000bbc <_ZN3ASK13validateRxBufEv>:

// Check whether the latest received message is complete and uncorrupted
// We should always check the FCS at user level, not interrupt level
// since it is slow
void ASK::validateRxBuf()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xffff;
 8000bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc8:	81fb      	strh	r3, [r7, #14]
    // The CRC covers the byte count, headers and user data
    for (uint8_t i = 0; i < _rxBufLen; i++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	737b      	strb	r3, [r7, #13]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	7b7a      	ldrb	r2, [r7, #13]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	bf34      	ite	cc
 8000bdc:	2301      	movcc	r3, #1
 8000bde:	2300      	movcs	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00f      	beq.n	8000c06 <_ZN3ASK13validateRxBufEv+0x4a>
	crc = crc_ccitt_update(crc, _rxBuf[i]);
 8000be6:	7b7b      	ldrb	r3, [r7, #13]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fa1c 	bl	8001032 <_Z16crc_ccitt_updateth>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < _rxBufLen; i++)
 8000bfe:	7b7b      	ldrb	r3, [r7, #13]
 8000c00:	3301      	adds	r3, #1
 8000c02:	737b      	strb	r3, [r7, #13]
 8000c04:	e7e3      	b.n	8000bce <_ZN3ASK13validateRxBufEv+0x12>
    if (crc != 0xf0b8) // CRC when buffer and expected CRC are CRC'd
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	f24f 02b8 	movw	r2, #61624	; 0xf0b8
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d00b      	beq.n	8000c28 <_ZN3ASK13validateRxBufEv+0x6c>
    {
	// Reject and drop the message
	_rxBad++;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	8a5b      	ldrh	r3, [r3, #18]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	825a      	strh	r2, [r3, #18]
	_rxBufValid = false;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return;
 8000c26:	e033      	b.n	8000c90 <_ZN3ASK13validateRxBufEv+0xd4>
    }

    // Extract the 4 headers that follow the message length
    _rxHeaderTo    = _rxBuf[1];
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	71da      	strb	r2, [r3, #7]
    _rxHeaderFrom  = _rxBuf[2];
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	721a      	strb	r2, [r3, #8]
    _rxHeaderId    = _rxBuf[3];
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	725a      	strb	r2, [r3, #9]
    _rxHeaderFlags = _rxBuf[4];
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	729a      	strb	r2, [r3, #10]
    if (_promiscuous ||
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	799b      	ldrb	r3, [r3, #6]
	_rxHeaderTo == _thisAddress ||
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10b      	bne.n	8000c70 <_ZN3ASK13validateRxBufEv+0xb4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	79db      	ldrb	r3, [r3, #7]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	795b      	ldrb	r3, [r3, #5]
    if (_promiscuous ||
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d004      	beq.n	8000c70 <_ZN3ASK13validateRxBufEv+0xb4>
	_rxHeaderTo == BROADCAST_ADDRESS)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	79db      	ldrb	r3, [r3, #7]
 8000c6a:	b2db      	uxtb	r3, r3
	_rxHeaderTo == _thisAddress ||
 8000c6c:	2bff      	cmp	r3, #255	; 0xff
 8000c6e:	d101      	bne.n	8000c74 <_ZN3ASK13validateRxBufEv+0xb8>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <_ZN3ASK13validateRxBufEv+0xba>
 8000c74:	2300      	movs	r3, #0
    if (_promiscuous ||
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00a      	beq.n	8000c90 <_ZN3ASK13validateRxBufEv+0xd4>
    {
	_rxGood++;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	8a9b      	ldrh	r3, [r3, #20]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	3301      	adds	r3, #1
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	829a      	strh	r2, [r3, #20]
	_rxBufValid = true;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
}
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_ZN3ASK12receiveTimerEv>:


void INTERRUPT_ATTR ASK::receiveTimer()
{
 8000c96:	b590      	push	{r4, r7, lr}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    bool rxSample = readRx();
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff1c 	bl	8000adc <_ZN3ASK6readRxEv>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]

    // Integrate each sample
    if (rxSample)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d008      	beq.n	8000cc0 <_ZN3ASK12receiveTimerEv+0x2a>
	_rxIntegrator++;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    if (rxSample != _rxLastSample)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	bf14      	ite	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	2300      	moveq	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d017      	beq.n	8000d08 <_ZN3ASK12receiveTimerEv+0x72>
    {
	// Transition, advance if ramp > 80, retard if < 80
	_rxPllRamp += ((_rxPllRamp < ASK_RAMP_TRANSITION)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000cde:	b2db      	uxtb	r3, r3
			   ? ASK_RAMP_INC_RETARD
 8000ce0:	2b4f      	cmp	r3, #79	; 0x4f
 8000ce2:	d801      	bhi.n	8000ce8 <_ZN3ASK12receiveTimerEv+0x52>
 8000ce4:	210b      	movs	r1, #11
 8000ce6:	e000      	b.n	8000cea <_ZN3ASK12receiveTimerEv+0x54>
 8000ce8:	211d      	movs	r1, #29
	_rxPllRamp += ((_rxPllRamp < ASK_RAMP_TRANSITION)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	b2cb      	uxtb	r3, r1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			   : ASK_RAMP_INC_ADVANCE);
	_rxLastSample = rxSample;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000d06:	e008      	b.n	8000d1a <_ZN3ASK12receiveTimerEv+0x84>
    }
    else
    {
	// No transition
	// Advance ramp by standard 20 (== 160/8 samples)
	_rxPllRamp += ASK_RAMP_INC;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	3314      	adds	r3, #20
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    if (_rxPllRamp >= ASK_RX_RAMP_LEN)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b9f      	cmp	r3, #159	; 0x9f
 8000d24:	bf8c      	ite	hi
 8000d26:	2301      	movhi	r3, #1
 8000d28:	2300      	movls	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80d4 	beq.w	8000eda <_ZN3ASK12receiveTimerEv+0x244>
    {
	// Add this to the 12th bit of _rxBits, LSB first
	// The last 12 bits are kept
	_rxBits >>= 1;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	085b      	lsrs	r3, r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

	// Check the integrator to see how many samples in this cycle were high.
	// If < 5 out of 8, then its declared a 0 bit, else a 1;
	if (_rxIntegrator >= 5)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	bf8c      	ite	hi
 8000d4c:	2301      	movhi	r3, #1
 8000d4e:	2300      	movls	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <_ZN3ASK12receiveTimerEv+0xd0>
	    _rxBits |= 0x800;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	85da      	strh	r2, [r3, #46]	; 0x2e

	_rxPllRamp -= ASK_RX_RAMP_LEN;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	3360      	adds	r3, #96	; 0x60
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	_rxIntegrator = 0; // Clear the integral for the next cycle
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	if (_rxActive)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 8089 	beq.w	8000eaa <_ZN3ASK12receiveTimerEv+0x214>
	{
	    // We have the start symbol and now we are collecting message bits,
	    // 6 per symbol, each which has to be decoded to 4 bits
	    if (++_rxBitCount >= 12)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	4619      	mov	r1, r3
 8000da8:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8000dac:	2b0b      	cmp	r3, #11
 8000dae:	bf8c      	ite	hi
 8000db0:	2301      	movhi	r3, #1
 8000db2:	2300      	movls	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 808f 	beq.w	8000eda <_ZN3ASK12receiveTimerEv+0x244>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte =
		    (symbol_6to4(_rxBits & 0x3f)) << 4
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fec7 	bl	8000b60 <_ZN3ASK11symbol_6to4Eh>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	011b      	lsls	r3, r3, #4
		    | symbol_6to4(_rxBits >> 6);
 8000dd6:	b25c      	sxtb	r4, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff feba 	bl	8000b60 <_ZN3ASK11symbol_6to4Eh>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4323      	orrs	r3, r4
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	73bb      	strb	r3, [r7, #14]

		// The first decoded byte is the byte count of the following message
		// the count includes the byte count and the 2 trailing FCS bytes
		// REVISIT: may also include the ACK flag at 0x40
		if (_rxBufLen == 0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d020      	beq.n	8000e4e <_ZN3ASK12receiveTimerEv+0x1b8>
		{
		    // The first byte is the byte count
		    // Check it for sensibility. It cant be less than 7, since it
		    // includes the byte count itself, the 4 byte header and the 2 byte FCS
		    _rxCount = this_byte;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7bba      	ldrb	r2, [r7, #14]
 8000e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		    if (_rxCount < 7 || _rxCount > ASK_MAX_PAYLOAD_LEN)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b06      	cmp	r3, #6
 8000e1e:	d905      	bls.n	8000e2c <_ZN3ASK12receiveTimerEv+0x196>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b43      	cmp	r3, #67	; 0x43
 8000e2a:	d901      	bls.n	8000e30 <_ZN3ASK12receiveTimerEv+0x19a>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <_ZN3ASK12receiveTimerEv+0x19c>
 8000e30:	2300      	movs	r3, #0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00b      	beq.n	8000e4e <_ZN3ASK12receiveTimerEv+0x1b8>
		    {
			// Stupid message length, drop the whole thing
			_rxActive = false;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_rxBad++;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8a5b      	ldrh	r3, [r3, #18]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	825a      	strh	r2, [r3, #18]
                        return;
 8000e4c:	e045      	b.n	8000eda <_ZN3ASK12receiveTimerEv+0x244>
		    }
		}
		_rxBuf[_rxBufLen++] = this_byte;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	b2d1      	uxtb	r1, r2
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	7bba      	ldrb	r2, [r7, #14]
 8000e68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		if (_rxBufLen >= _rxCount)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	bf2c      	ite	cs
 8000e80:	2301      	movcs	r3, #1
 8000e82:	2300      	movcc	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00a      	beq.n	8000ea0 <_ZN3ASK12receiveTimerEv+0x20a>
		{
		    // Got all the bytes now
		    _rxActive = false;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		    _rxBufFull = true;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		    setModeIdle();
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fbf4 	bl	8000688 <_ZN3ASK11setModeIdleEv>
		}
		_rxBitCount = 0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000ea8:	e017      	b.n	8000eda <_ZN3ASK12receiveTimerEv+0x244>
	    }
	}
	// Not in a message, see if we have a start symbol
	else if (_rxBits == ASK_START_SYMBOL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f640 3238 	movw	r2, #2872	; 0xb38
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00b      	beq.n	8000eda <_ZN3ASK12receiveTimerEv+0x244>
	{
	    // Have start symbol, start collecting message
	    _rxActive = true;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	    _rxBitCount = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    _rxBufLen = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	}
    }
}
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <_ZN3ASK13transmitTimerEv>:

void INTERRUPT_ATTR ASK::transmitTimer()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    if (_txSample++ == 0)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	b2d1      	uxtb	r1, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf0c      	ite	eq
 8000efc:	2301      	moveq	r3, #1
 8000efe:	2300      	movne	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d041      	beq.n	8000f8a <_ZN3ASK13transmitTimerEv+0xaa>
    {
	// Send next bit
	// Symbols are sent LSB first
	// Finished sending the whole message? (after waiting one bit period
	// since the last bit)
	if (_txIndex >= _txBufLen)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d30a      	bcc.n	8000f2c <_ZN3ASK13transmitTimerEv+0x4c>
	{
	    setModeIdle();
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fbb6 	bl	8000688 <_ZN3ASK11setModeIdleEv>
	    _txGood++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8adb      	ldrh	r3, [r3, #22]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	3301      	adds	r3, #1
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	82da      	strh	r2, [r3, #22]
 8000f2a:	e02e      	b.n	8000f8a <_ZN3ASK13transmitTimerEv+0xaa>
	}
	else
	{
	    writeTx(_txBuf[_txIndex] & (1 << _txBit++));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8000f32:	461a      	mov	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	b2d0      	uxtb	r0, r2
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	f882 0077 	strb.w	r0, [r2, #119]	; 0x77
 8000f4e:	fa41 f303 	asr.w	r3, r1, r3
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fdd6 	bl	8000b14 <_ZN3ASK7writeTxEb>
	    if (_txBit >= 6)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000f6e:	2b05      	cmp	r3, #5
 8000f70:	d90b      	bls.n	8000f8a <_ZN3ASK13transmitTimerEv+0xaa>
	    {
		_txBit = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		_txIndex++;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	    }
	}
    }

    if (_txSample > 7)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d903      	bls.n	8000f9c <_ZN3ASK13transmitTimerEv+0xbc>
	_txSample = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_ZN3ASK20handleTimerInterruptEv>:

void ASK::handleTimerInterrupt() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if (_mode == ModeRx)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <_ZN3ASK20handleTimerInterruptEv+0x24>
		receiveTimer();
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fe68 	bl	8000c96 <_ZN3ASK12receiveTimerEv>
	else if (_mode == ModeTx)
		transmitTimer();
}
 8000fc6:	e00c      	b.n	8000fe2 <_ZN3ASK20handleTimerInterruptEv+0x3e>
	else if (_mode == ModeTx)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	791b      	ldrb	r3, [r3, #4]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <_ZN3ASK20handleTimerInterruptEv+0x3e>
		transmitTimer();
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff7f 	bl	8000ee0 <_ZN3ASK13transmitTimerEv>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <_ZN3ASKD1Ev>:
/// Internal ramp adjustment parameter
#define ASK_RAMP_INC_ADVANCE (ASK_RAMP_INC+ASK_RAMP_ADJUST)

#define ASK_PREAMBLE_LEN 8

class ASK : public GenericDriver
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <_ZN3ASKD1Ev+0x20>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fac1 	bl	8000584 <_ZN13GenericDriverD1Ev>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08006fb0 	.word	0x08006fb0

08001010 <_ZN3ASKD0Ev>:
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ffe7 	bl	8000fec <_ZN3ASKD1Ev>
 800101e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 fefd 	bl	8005e22 <_ZdlPvj>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_Z16crc_ccitt_updateth>:

    return crc;
}

uint16_t crc_ccitt_update (uint16_t crc, uint8_t data)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	460a      	mov	r2, r1
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	4613      	mov	r3, r2
 8001040:	717b      	strb	r3, [r7, #5]
    data ^= lo8 (crc);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	b25a      	sxtb	r2, r3
 8001046:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800104a:	4053      	eors	r3, r2
 800104c:	b25b      	sxtb	r3, r3
 800104e:	717b      	strb	r3, [r7, #5]
    data ^= data << 4;
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	b25a      	sxtb	r2, r3
 8001056:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800105a:	4053      	eors	r3, r2
 800105c:	b25b      	sxtb	r3, r3
 800105e:	717b      	strb	r3, [r7, #5]

    return ((((uint16_t)data << 8) | hi8 (crc)) ^ (uint8_t)(data >> 4)
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	797b      	ldrb	r3, [r7, #5]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	b2db      	uxtb	r3, r3
 8001078:	b21b      	sxth	r3, r3
 800107a:	4053      	eors	r3, r2
 800107c:	b21a      	sxth	r2, r3
	    ^ ((uint16_t)data << 3));
 800107e:	797b      	ldrb	r3, [r7, #5]
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	b21b      	sxth	r3, r3
 8001084:	4053      	eors	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29b      	uxth	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <_ZN13GenericDriverC1Ev>:

#include "stm32l4xx_hal.h"
#include "GenericDriver.h"
#include <stdlib.h>

GenericDriver::GenericDriver()
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <_ZN13GenericDriverC1Ev+0x58>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	711a      	strb	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	715a      	strb	r2, [r3, #5]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	22ff      	movs	r2, #255	; 0xff
 80010b6:	72da      	strb	r2, [r3, #11]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	22ff      	movs	r2, #255	; 0xff
 80010bc:	731a      	strb	r2, [r3, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	735a      	strb	r2, [r3, #13]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	739a      	strb	r2, [r3, #14]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	825a      	strh	r2, [r3, #18]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	829a      	strh	r2, [r3, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	82da      	strh	r2, [r3, #22]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
{
}
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	08007030 	.word	0x08007030

080010f4 <_ZN13GenericDriver4initEv>:

bool GenericDriver::init()
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    return true;
 80010fc:	2301      	movs	r3, #1
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_ZN13GenericDriver13waitAvailableEt>:

// Blocks until a valid message is received
void GenericDriver::waitAvailable(uint16_t polldelay)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	807b      	strh	r3, [r7, #2]
    while (!available())
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	330c      	adds	r3, #12
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
 8001122:	4603      	mov	r3, r0
 8001124:	f083 0301 	eor.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <_ZN13GenericDriver13waitAvailableEt+0x34>
      {
	YIELD;
	if (polldelay)
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <_ZN13GenericDriver13waitAvailableEt+0xc>
		HAL_Delay(polldelay);
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fa24 	bl	8002584 <HAL_Delay>
    while (!available())
 800113c:	e7eb      	b.n	8001116 <_ZN13GenericDriver13waitAvailableEt+0xc>
      }
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZN13GenericDriver20waitAvailableTimeoutEtt>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool GenericDriver::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]
 8001152:	4613      	mov	r3, r2
 8001154:	803b      	strh	r3, [r7, #0]
    unsigned long starttime = HAL_GetTick();
 8001156:	f001 fa09 	bl	800256c <HAL_GetTick>
 800115a:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - starttime) < timeout)
 800115c:	f001 fa06 	bl	800256c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad2      	subs	r2, r2, r3
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	429a      	cmp	r2, r3
 800116a:	bf34      	ite	cc
 800116c:	2301      	movcc	r3, #1
 800116e:	2300      	movcs	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d012      	beq.n	800119c <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x56>
    {
        if (available())
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	330c      	adds	r3, #12
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4798      	blx	r3
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x46>
	{
           return true;
 8001188:	2301      	movs	r3, #1
 800118a:	e008      	b.n	800119e <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x58>
	}
	YIELD;
	if (polldelay)
 800118c:	883b      	ldrh	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0e4      	beq.n	800115c <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x16>
		HAL_Delay(polldelay);
 8001192:	883b      	ldrh	r3, [r7, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f9f5 	bl	8002584 <HAL_Delay>
    while ((HAL_GetTick() - starttime) < timeout)
 800119a:	e7df      	b.n	800115c <_ZN13GenericDriver20waitAvailableTimeoutEtt+0x16>
    }
    return false;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZN13GenericDriver14waitPacketSentEv>:

bool GenericDriver::waitPacketSent()
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
    while (_mode == ModeTx)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d000      	beq.n	80011c4 <_ZN13GenericDriver14waitPacketSentEv+0x1e>
 80011c2:	e7f4      	b.n	80011ae <_ZN13GenericDriver14waitPacketSentEv+0x8>
	YIELD; // Wait for any previous transmit to finish
    return true;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_ZN13GenericDriver14waitPacketSentEt>:

bool GenericDriver::waitPacketSent(uint16_t timeout)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]
    unsigned long starttime = HAL_GetTick();
 80011de:	f001 f9c5 	bl	800256c <HAL_GetTick>
 80011e2:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - starttime) < timeout)
 80011e4:	f001 f9c2 	bl	800256c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad2      	subs	r2, r2, r3
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	bf34      	ite	cc
 80011f4:	2301      	movcc	r3, #1
 80011f6:	2300      	movcs	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00b      	beq.n	8001216 <_ZN13GenericDriver14waitPacketSentEt+0x44>
    {
        if (_mode != ModeTx) // Any previous transmit finished?
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b03      	cmp	r3, #3
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0e8      	beq.n	80011e4 <_ZN13GenericDriver14waitPacketSentEt+0x12>
           return true;
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <_ZN13GenericDriver14waitPacketSentEt+0x46>
	YIELD;
    }
    return false;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZN13GenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool GenericDriver::waitCAD()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    if (!_cad_timeout)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <_ZN13GenericDriver7waitCADEv+0x14>
	return true;
 8001230:	2301      	movs	r3, #1
 8001232:	e032      	b.n	800129a <_ZN13GenericDriver7waitCADEv+0x7a>
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = HAL_GetTick();
 8001234:	f001 f99a 	bl	800256c <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]
    while (isChannelActive())
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3330      	adds	r3, #48	; 0x30
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d025      	beq.n	8001298 <_ZN13GenericDriver7waitCADEv+0x78>
    {
         if (HAL_GetTick() - t > _cad_timeout)
 800124c:	f001 f98e 	bl	800256c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad2      	subs	r2, r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	429a      	cmp	r2, r3
 800125c:	bf8c      	ite	hi
 800125e:	2301      	movhi	r3, #1
 8001260:	2300      	movls	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <_ZN13GenericDriver7waitCADEv+0x4c>
	     return false;
 8001268:	2300      	movs	r3, #0
 800126a:	e016      	b.n	800129a <_ZN13GenericDriver7waitCADEv+0x7a>
         HAL_Delay((rand() % 10 + 1) * 100);
 800126c:	f004 ff28 	bl	80060c0 <rand>
 8001270:	4601      	mov	r1, r0
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <_ZN13GenericDriver7waitCADEv+0x84>)
 8001274:	fb83 2301 	smull	r2, r3, r3, r1
 8001278:	109a      	asrs	r2, r3, #2
 800127a:	17cb      	asrs	r3, r1, #31
 800127c:	1ad2      	subs	r2, r2, r3
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	1aca      	subs	r2, r1, r3
 8001288:	1c53      	adds	r3, r2, #1
 800128a:	2264      	movs	r2, #100	; 0x64
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f001 f977 	bl	8002584 <HAL_Delay>
    while (isChannelActive())
 8001296:	e7d0      	b.n	800123a <_ZN13GenericDriver7waitCADEv+0x1a>
    }

    return true;
 8001298:	2301      	movs	r3, #1
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	66666667 	.word	0x66666667

080012a8 <_ZN13GenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool GenericDriver::isChannelActive()
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    return false;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_ZN13GenericDriver14setPromiscuousEb>:

void GenericDriver::setPromiscuous(bool promiscuous)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
    _promiscuous = promiscuous;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	78fa      	ldrb	r2, [r7, #3]
 80012ce:	719a      	strb	r2, [r3, #6]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_ZN13GenericDriver14setThisAddressEh>:

void GenericDriver::setThisAddress(uint8_t address)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70fb      	strb	r3, [r7, #3]
    _thisAddress = address;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	715a      	strb	r2, [r3, #5]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZN13GenericDriver11setHeaderToEh>:

void GenericDriver::setHeaderTo(uint8_t to)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	70fb      	strb	r3, [r7, #3]
    _txHeaderTo = to;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	72da      	strb	r2, [r3, #11]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN13GenericDriver13setHeaderFromEh>:

void GenericDriver::setHeaderFrom(uint8_t from)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
    _txHeaderFrom = from;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	731a      	strb	r2, [r3, #12]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_ZN13GenericDriver11setHeaderIdEh>:

void GenericDriver::setHeaderId(uint8_t id)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	70fb      	strb	r3, [r7, #3]
    _txHeaderId = id;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	735a      	strb	r2, [r3, #13]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_ZN13GenericDriver14setHeaderFlagsEhh>:

void GenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	4613      	mov	r3, r2
 8001362:	70bb      	strb	r3, [r7, #2]
    _txHeaderFlags &= ~clear;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7b9b      	ldrb	r3, [r3, #14]
 8001368:	b25a      	sxtb	r2, r3
 800136a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800136e:	43db      	mvns	r3, r3
 8001370:	b25b      	sxtb	r3, r3
 8001372:	4013      	ands	r3, r2
 8001374:	b25b      	sxtb	r3, r3
 8001376:	b2da      	uxtb	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	739a      	strb	r2, [r3, #14]
    _txHeaderFlags |= set;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7b9a      	ldrb	r2, [r3, #14]
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	739a      	strb	r2, [r3, #14]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_ZN13GenericDriver8headerToEv>:

uint8_t GenericDriver::headerTo()
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
    return _rxHeaderTo;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	79db      	ldrb	r3, [r3, #7]
 80013a2:	b2db      	uxtb	r3, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_ZN13GenericDriver10headerFromEv>:

uint8_t GenericDriver::headerFrom()
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    return _rxHeaderFrom;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7a1b      	ldrb	r3, [r3, #8]
 80013bc:	b2db      	uxtb	r3, r3
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_ZN13GenericDriver8headerIdEv>:

uint8_t GenericDriver::headerId()
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
    return _rxHeaderId;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7a5b      	ldrb	r3, [r3, #9]
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_ZN13GenericDriver11headerFlagsEv>:

uint8_t GenericDriver::headerFlags()
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    return _rxHeaderFlags;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7a9b      	ldrb	r3, [r3, #10]
 80013f0:	b2db      	uxtb	r3, r3
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_ZN13GenericDriver8lastRssiEv>:

int16_t GenericDriver::lastRssi()
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
    return _lastRssi;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	8a1b      	ldrh	r3, [r3, #16]
 800140a:	b21b      	sxth	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_ZN13GenericDriver4modeEv>:

GenericDriver::Mode  GenericDriver::mode()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    return _mode;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	b2db      	uxtb	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_ZN13GenericDriver7setModeENS_4ModeE>:

void  GenericDriver::setMode(Mode mode)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	70fb      	strb	r3, [r7, #3]
    _mode = mode;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	711a      	strb	r2, [r3, #4]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN13GenericDriver5sleepEv>:

bool  GenericDriver::sleep()
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    return false;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_ZN13GenericDriver5rxBadEv>:
//    Serial.println("");
//#endif
}

uint16_t GenericDriver::rxBad()
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
    return _rxBad;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	8a5b      	ldrh	r3, [r3, #18]
 8001472:	b29b      	uxth	r3, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_ZN13GenericDriver6rxGoodEv>:

uint16_t GenericDriver::rxGood()
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    return _rxGood;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	8a9b      	ldrh	r3, [r3, #20]
 800148c:	b29b      	uxth	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_ZN13GenericDriver6txGoodEv>:

uint16_t GenericDriver::txGood()
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
    return _txGood;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	8adb      	ldrh	r3, [r3, #22]
 80014a6:	b29b      	uxth	r3, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_ZN3lcdC1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tS1_tP17TIM_HandleTypeDef>:
 *      Author: noahr
 */

#include"lcd.h"

lcd::lcd(GPIO_TypeDef* rsPort, uint16_t rsPin, GPIO_TypeDef* enablePort, uint16_t enablePin, GPIO_TypeDef* d4Port, uint16_t d4Pin, GPIO_TypeDef* d5Port, uint16_t d5Pin, GPIO_TypeDef* d6Port, uint16_t d6Pin, GPIO_TypeDef* d7Port, uint16_t d7Pin, TIM_HandleTypeDef* timer) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <_ZN3lcdC1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tS1_tP17TIM_HandleTypeDef+0x84>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]
	_timer = timer;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014ce:	605a      	str	r2, [r3, #4]
	_rs_pin = rsPin;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	88fa      	ldrh	r2, [r7, #6]
 80014d4:	811a      	strh	r2, [r3, #8]
	_rs_port = rsPort;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	60da      	str	r2, [r3, #12]

	_enable_pin = enablePin;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8b3a      	ldrh	r2, [r7, #24]
 80014e0:	821a      	strh	r2, [r3, #16]
	_enable_port = enablePort;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	615a      	str	r2, [r3, #20]
	_data_pins[0] = d4Pin;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8c3a      	ldrh	r2, [r7, #32]
 80014ec:	831a      	strh	r2, [r3, #24]
	_data_pins[1] = d5Pin;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014f2:	835a      	strh	r2, [r3, #26]
	_data_pins[2] = d6Pin;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80014f8:	839a      	strh	r2, [r3, #28]
	_data_pins[3] = d7Pin;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80014fe:	83da      	strh	r2, [r3, #30]
	_data_ports[0] = d4Port;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
	_data_ports[1] = d5Port;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
	_data_ports[2] = d6Port;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
	_data_ports[3] = d7Port;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001516:	635a      	str	r2, [r3, #52]	; 0x34

	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	begin(16, 1);
 8001520:	2300      	movs	r3, #0
 8001522:	2201      	movs	r2, #1
 8001524:	2110      	movs	r1, #16
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f808 	bl	800153c <_ZN3lcd5beginEhhh>
}
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	080070b0 	.word	0x080070b0

0800153c <_ZN3lcd5beginEhhh>:

void lcd::begin(uint8_t cols, uint8_t lines, uint8_t dotsize){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af02      	add	r7, sp, #8
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4608      	mov	r0, r1
 8001546:	4611      	mov	r1, r2
 8001548:	461a      	mov	r2, r3
 800154a:	4603      	mov	r3, r0
 800154c:	70fb      	strb	r3, [r7, #3]
 800154e:	460b      	mov	r3, r1
 8001550:	70bb      	strb	r3, [r7, #2]
 8001552:	4613      	mov	r3, r2
 8001554:	707b      	strb	r3, [r7, #1]
	if (lines > 1) {
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d908      	bls.n	800156e <_ZN3lcd5beginEhhh+0x32>
		_displayfunction |= LCD_2LINE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	b2da      	uxtb	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
	_numlines = lines;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	78ba      	ldrb	r2, [r7, #2]
 8001572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	3340      	adds	r3, #64	; 0x40
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	2240      	movs	r2, #64	; 0x40
 8001582:	2100      	movs	r1, #0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f863 	bl	8001650 <_ZN3lcd13setRowOffsetsEiiii>

	if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800158a:	787b      	ldrb	r3, [r7, #1]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00b      	beq.n	80015a8 <_ZN3lcd5beginEhhh+0x6c>
 8001590:	78bb      	ldrb	r3, [r7, #2]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <_ZN3lcd5beginEhhh+0x6c>
		_displayfunction |= LCD_5x10DOTS;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	// set rw pin output
	// set enable pin output

	// set all data pins output

	delay_us(50000); // 50 ms delay for device init
 80015a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f973 	bl	8001898 <_ZN3lcd8delay_usEt>
	// pull rs and rw low to begin commands
	HAL_GPIO_WritePin(_rs_port, _rs_pin, GPIO_PIN_RESET);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68d8      	ldr	r0, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	891b      	ldrh	r3, [r3, #8]
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	f001 fad9 	bl	8002b74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_enable_port, _enable_pin, GPIO_PIN_RESET);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6958      	ldr	r0, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8a1b      	ldrh	r3, [r3, #16]
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	f001 fad1 	bl	8002b74 <HAL_GPIO_WritePin>
	// set to 4 bit mode
	write4bits(0x03);
 80015d2:	2103      	movs	r1, #3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f924 	bl	8001822 <_ZN3lcd10write4bitsEh>
	delay_us(4500); // 4.1ms
 80015da:	f241 1194 	movw	r1, #4500	; 0x1194
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f95a 	bl	8001898 <_ZN3lcd8delay_usEt>

	// second try
	write4bits(0x03);
 80015e4:	2103      	movs	r1, #3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f91b 	bl	8001822 <_ZN3lcd10write4bitsEh>
	delay_us(150);
 80015ec:	2196      	movs	r1, #150	; 0x96
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f952 	bl	8001898 <_ZN3lcd8delay_usEt>

	// third try
	write4bits(0x03);
 80015f4:	2103      	movs	r1, #3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f913 	bl	8001822 <_ZN3lcd10write4bitsEh>

	// set to 4 bit interface
	write4bits(0x02);
 80015fc:	2102      	movs	r1, #2
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f90f 	bl	8001822 <_ZN3lcd10write4bitsEh>

	command(LCD_FUNCTIONSET | _displayfunction);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f898 	bl	8001748 <_ZN3lcd7commandEh>

	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2204      	movs	r2, #4
 800161c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	display();
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f876 	bl	8001712 <_ZN3lcd7displayEv>
	clear();
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f833 	bl	8001692 <_ZN3lcd5clearEv>
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	command(LCD_ENTRYMODESET | _displaymode);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f880 	bl	8001748 <_ZN3lcd7commandEh>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZN3lcd13setRowOffsetsEiiii>:

void lcd::setRowOffsets(int row1, int row2, int row3, int row4){
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	_row_offsets[0] = row1;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	_row_offsets[1] = row2;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	_row_offsets[2] = row3;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	_row_offsets[3] = row4;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_ZN3lcd5clearEv>:

// user high level commands
void lcd::clear() {
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	command(LCD_CLEARDISPLAY);
 800169a:	2101      	movs	r1, #1
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f853 	bl	8001748 <_ZN3lcd7commandEh>
	delay_us(2000);
 80016a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8f6 	bl	8001898 <_ZN3lcd8delay_usEt>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZN3lcd9setCursorEhh>:
void lcd::home() {
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void lcd::setCursor(uint8_t col, uint8_t row) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
 80016c0:	4613      	mov	r3, r2
 80016c2:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80016c4:	2304      	movs	r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
	if (row >= max_lines) {
 80016c8:	78bb      	ldrb	r3, [r7, #2]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d901      	bls.n	80016d2 <_ZN3lcd9setCursorEhh+0x1e>
		row = max_lines - 1;
 80016ce:	2303      	movs	r3, #3
 80016d0:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= _numlines) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80016d8:	78ba      	ldrb	r2, [r7, #2]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d304      	bcc.n	80016e8 <_ZN3lcd9setCursorEhh+0x34>
		row = _numlines - 1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80016e4:	3b01      	subs	r3, #1
 80016e6:	70bb      	strb	r3, [r7, #2]
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80016e8:	78bb      	ldrb	r3, [r7, #2]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f81f 	bl	8001748 <_ZN3lcd7commandEh>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_ZN3lcd7displayEv>:
void lcd::noDisplay() {
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}

void lcd::display() {
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  _displaycontrol |= LCD_DISPLAYON;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	b2da      	uxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f804 	bl	8001748 <_ZN3lcd7commandEh>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZN3lcd7commandEh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void lcd::command(uint8_t value) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
  send(value, GPIO_PIN_RESET);
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f815 	bl	800178a <_ZN3lcd4sendEh13GPIO_PinState>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_ZN3lcd5writeEh>:

inline size_t lcd::write(uint8_t value) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  send(value, GPIO_PIN_SET);
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	2201      	movs	r2, #1
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f805 	bl	800178a <_ZN3lcd4sendEh13GPIO_PinState>
  return 1; // assume success
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_ZN3lcd4sendEh13GPIO_PinState>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void lcd::send(uint8_t value, GPIO_PinState mode) {
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	70fb      	strb	r3, [r7, #3]
 8001796:	4613      	mov	r3, r2
 8001798:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(_rs_port, _rs_pin, mode);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68d8      	ldr	r0, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	891b      	ldrh	r3, [r3, #8]
 80017a2:	78ba      	ldrb	r2, [r7, #2]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f001 f9e5 	bl	8002b74 <HAL_GPIO_WritePin>
  // if there is a RW pin indicated, set it low to Write

  write4bits(value>>4);
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f835 	bl	8001822 <_ZN3lcd10write4bitsEh>
  write4bits(value);
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	4619      	mov	r1, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f830 	bl	8001822 <_ZN3lcd10write4bitsEh>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZN3lcd11pulseEnableEv>:

void lcd::pulseEnable(void) {
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_enable_port, _enable_pin, GPIO_PIN_RESET);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6958      	ldr	r0, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8a1b      	ldrh	r3, [r3, #16]
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	f001 f9c9 	bl	8002b74 <HAL_GPIO_WritePin>
	delay_us(1);
 80017e2:	2101      	movs	r1, #1
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f857 	bl	8001898 <_ZN3lcd8delay_usEt>
	HAL_GPIO_WritePin(_enable_port, _enable_pin, GPIO_PIN_SET);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6958      	ldr	r0, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	8a1b      	ldrh	r3, [r3, #16]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f001 f9bd 	bl	8002b74 <HAL_GPIO_WritePin>
	delay_us(1);
 80017fa:	2101      	movs	r1, #1
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f84b 	bl	8001898 <_ZN3lcd8delay_usEt>
	HAL_GPIO_WritePin(_enable_port, _enable_pin, GPIO_PIN_RESET);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6958      	ldr	r0, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8a1b      	ldrh	r3, [r3, #16]
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	f001 f9b1 	bl	8002b74 <HAL_GPIO_WritePin>
	delay_us(100);
 8001812:	2164      	movs	r1, #100	; 0x64
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f83f 	bl	8001898 <_ZN3lcd8delay_usEt>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZN3lcd10write4bitsEh>:

void lcd::write4bits(uint8_t value) {
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 4; i++) {
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b03      	cmp	r3, #3
 8001836:	dc28      	bgt.n	800188a <_ZN3lcd10write4bitsEh+0x68>
		if (((value >> i) & 0x01) == 1) {
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	fa42 f303 	asr.w	r3, r2, r3
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00e      	beq.n	8001866 <_ZN3lcd10write4bitsEh+0x44>
			HAL_GPIO_WritePin(_data_ports[i], _data_pins[i], GPIO_PIN_SET);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	320a      	adds	r2, #10
 800184e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	320c      	adds	r2, #12
 8001858:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 f988 	bl	8002b74 <HAL_GPIO_WritePin>
 8001864:	e00d      	b.n	8001882 <_ZN3lcd10write4bitsEh+0x60>
		} else {
			HAL_GPIO_WritePin(_data_ports[i], _data_pins[i], GPIO_PIN_RESET);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	320a      	adds	r2, #10
 800186c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	320c      	adds	r2, #12
 8001876:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	f001 f979 	bl	8002b74 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e7d3      	b.n	8001832 <_ZN3lcd10write4bitsEh+0x10>
		}

	}
	pulseEnable();
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ff9d 	bl	80017ca <_ZN3lcd11pulseEnableEv>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZN3lcd8delay_usEt>:

void lcd::delay_us(uint16_t us) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(_timer, 0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(_timer) < us);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	bf34      	ite	cc
 80018bc:	2301      	movcc	r3, #1
 80018be:	2300      	movcs	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d000      	beq.n	80018c8 <_ZN3lcd8delay_usEt+0x30>
 80018c6:	e7f2      	b.n	80018ae <_ZN3lcd8delay_usEt+0x16>
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_ZN3ASK5speedEv>:
    /// Starts the transmitter in the RF69.
    void           setModeTx();

    /// Returns the current speed in bits per second
    /// \return The current speed in bits per second
    uint16_t        speed() { return _speed;}
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8c1b      	ldrh	r3, [r3, #32]
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b0c3      	sub	sp, #268	; 0x10c
 80018f0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	int32_t CH1_DC = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	uint8_t errMsg[] = "Fail init";
 80018f8:	4aa5      	ldr	r2, [pc, #660]	; (8001b90 <main+0x2a4>)
 80018fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001900:	c303      	stmia	r3!, {r0, r1}
 8001902:	801a      	strh	r2, [r3, #0]
	uint8_t passMsg[] = "Successful init";
 8001904:	4ba3      	ldr	r3, [pc, #652]	; (8001b94 <main+0x2a8>)
 8001906:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800190a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800190c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t preData[] = "Received: ";
 8001910:	4aa1      	ldr	r2, [pc, #644]	; (8001b98 <main+0x2ac>)
 8001912:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001916:	ca07      	ldmia	r2, {r0, r1, r2}
 8001918:	c303      	stmia	r3!, {r0, r1}
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	3302      	adds	r3, #2
 800191e:	0c12      	lsrs	r2, r2, #16
 8001920:	701a      	strb	r2, [r3, #0]
	uint8_t newLine[] = "\r\n";
 8001922:	4a9e      	ldr	r2, [pc, #632]	; (8001b9c <main+0x2b0>)
 8001924:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	4611      	mov	r1, r2
 800192c:	8019      	strh	r1, [r3, #0]
 800192e:	3302      	adds	r3, #2
 8001930:	0c12      	lsrs	r2, r2, #16
 8001932:	701a      	strb	r2, [r3, #0]
	uint8_t space[] = " ";
 8001934:	2320      	movs	r3, #32
 8001936:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193a:	f000 fda7 	bl	800248c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193e:	f000 f93b 	bl	8001bb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001942:	f000 fad1 	bl	8001ee8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001946:	f000 fa9b 	bl	8001e80 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 800194a:	f000 f9f7 	bl	8001d3c <_ZL12MX_TIM2_Initv>
  MX_TIM1_Init();
 800194e:	f000 f993 	bl	8001c78 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001952:	4893      	ldr	r0, [pc, #588]	; (8001ba0 <main+0x2b4>)
 8001954:	f002 fc9e 	bl	8004294 <HAL_TIM_Base_Start>
  lcd lcd(GPIOB, GPIO_PIN_3, GPIOA, GPIO_PIN_10, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, GPIOB, GPIO_PIN_10, GPIOA, GPIO_PIN_8, &htim1);
 8001958:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800195c:	4b90      	ldr	r3, [pc, #576]	; (8001ba0 <main+0x2b4>)
 800195e:	9309      	str	r3, [sp, #36]	; 0x24
 8001960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001964:	9308      	str	r3, [sp, #32]
 8001966:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800196a:	9307      	str	r3, [sp, #28]
 800196c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001970:	9306      	str	r3, [sp, #24]
 8001972:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <main+0x2b8>)
 8001974:	9305      	str	r3, [sp, #20]
 8001976:	2310      	movs	r3, #16
 8001978:	9304      	str	r3, [sp, #16]
 800197a:	4b8a      	ldr	r3, [pc, #552]	; (8001ba4 <main+0x2b8>)
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	2320      	movs	r3, #32
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	4b88      	ldr	r3, [pc, #544]	; (8001ba4 <main+0x2b8>)
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001990:	2208      	movs	r2, #8
 8001992:	4984      	ldr	r1, [pc, #528]	; (8001ba4 <main+0x2b8>)
 8001994:	f7ff fd8e 	bl	80014b4 <_ZN3lcdC1EP12GPIO_TypeDeftS1_tS1_tS1_tS1_tS1_tP17TIM_HandleTypeDef>
  lcd.begin(16, 2);
 8001998:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800199c:	2300      	movs	r3, #0
 800199e:	2202      	movs	r2, #2
 80019a0:	2110      	movs	r1, #16
 80019a2:	f7ff fdcb 	bl	800153c <_ZN3lcd5beginEhhh>
  char mess[] = "Message:";
 80019a6:	4a80      	ldr	r2, [pc, #512]	; (8001ba8 <main+0x2bc>)
 80019a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ae:	c303      	stmia	r3!, {r0, r1}
 80019b0:	701a      	strb	r2, [r3, #0]
  size_t lenMess = sizeof(mess);
 80019b2:	2309      	movs	r3, #9
 80019b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (unsigned int i = 0; i < lenMess -1; i++) {
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d211      	bcs.n	80019f0 <main+0x104>
	  lcd.write(mess[i]);
 80019cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80019d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019d4:	4413      	add	r3, r2
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fec2 	bl	8001768 <_ZN3lcd5writeEh>
  for (unsigned int i = 0; i < lenMess -1; i++) {
 80019e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019e8:	3301      	adds	r3, #1
 80019ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ee:	e7e6      	b.n	80019be <main+0xd2>
  }
  lcd.setCursor(0, 1);
 80019f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f4:	2201      	movs	r2, #1
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe5b 	bl	80016b4 <_ZN3lcd9setCursorEhh>

  while (!driver.init()) {
 80019fe:	486b      	ldr	r0, [pc, #428]	; (8001bac <main+0x2c0>)
 8001a00:	f7fe fe24 	bl	800064c <_ZN3ASK4initEv>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <main+0x142>
	  HAL_UART_Transmit(&huart2, errMsg, strlen((char*) errMsg), 2000);
 8001a10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fbdb 	bl	80001d0 <strlen>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001a22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a26:	4862      	ldr	r0, [pc, #392]	; (8001bb0 <main+0x2c4>)
 8001a28:	f003 fd00 	bl	800542c <HAL_UART_Transmit>
  while (!driver.init()) {
 8001a2c:	e7e7      	b.n	80019fe <main+0x112>
  }
  HAL_UART_Transmit(&huart2, passMsg, strlen((char*) passMsg), 2000);
 8001a2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fbcc 	bl	80001d0 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001a40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a44:	485a      	ldr	r0, [pc, #360]	; (8001bb0 <main+0x2c4>)
 8001a46:	f003 fcf1 	bl	800542c <HAL_UART_Transmit>
  TIM2_IRQHandler();
 8001a4a:	f000 fc0f 	bl	800226c <TIM2_IRQHandler>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a4e:	4859      	ldr	r0, [pc, #356]	; (8001bb4 <main+0x2c8>)
 8001a50:	f002 fc88 	bl	8004364 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t buf[ASK_MAX_MESSAGE_LEN];
	  uint8_t buflen = sizeof(buf);
 8001a54:	233c      	movs	r3, #60	; 0x3c
 8001a56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if (driver.recv(buf, &buflen)) {
 8001a5a:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4852      	ldr	r0, [pc, #328]	; (8001bac <main+0x2c0>)
 8001a64:	f7fe fea4 	bl	80007b0 <_ZN3ASK4recvEPhS0_>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f2      	beq.n	8001a54 <main+0x168>
		  HAL_UART_Transmit(&huart2, preData, strlen((char*) preData), 2000);
 8001a6e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fbac 	bl	80001d0 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001a80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a84:	484a      	ldr	r0, [pc, #296]	; (8001bb0 <main+0x2c4>)
 8001a86:	f003 fcd1 	bl	800542c <HAL_UART_Transmit>
		  for (uint8_t i = 0; i < buflen; i++) {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001a90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a94:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d264      	bcs.n	8001b66 <main+0x27a>
			  if (i%16==15) {
 8001a9c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d126      	bne.n	8001af6 <main+0x20a>
				  HAL_UART_Transmit(&huart2, (const uint8_t*) buf[i], strlen((char*) buf[i]), 2000);
 8001aa8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001aac:	33e0      	adds	r3, #224	; 0xe0
 8001aae:	443b      	add	r3, r7
 8001ab0:	f813 3ce0 	ldrb.w	r3, [r3, #-224]
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001aba:	33e0      	adds	r3, #224	; 0xe0
 8001abc:	443b      	add	r3, r7
 8001abe:	f813 3ce0 	ldrb.w	r3, [r3, #-224]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fb84 	bl	80001d0 <strlen>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	4837      	ldr	r0, [pc, #220]	; (8001bb0 <main+0x2c4>)
 8001ad4:	f003 fcaa 	bl	800542c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, newLine, strlen((char*) newLine), 2000);
 8001ad8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fb77 	bl	80001d0 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001aea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aee:	4830      	ldr	r0, [pc, #192]	; (8001bb0 <main+0x2c4>)
 8001af0:	f003 fc9c 	bl	800542c <HAL_UART_Transmit>
 8001af4:	e031      	b.n	8001b5a <main+0x26e>
			  } else {
				  lcd.write((char)buf[i]);
 8001af6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001afa:	33e0      	adds	r3, #224	; 0xe0
 8001afc:	443b      	add	r3, r7
 8001afe:	f813 2ce0 	ldrb.w	r2, [r3, #-224]
 8001b02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fe2d 	bl	8001768 <_ZN3lcd5writeEh>
				  HAL_UART_Transmit(&huart2, (const uint8_t*) buf[i], strlen((char*) buf[i]), 2000);
 8001b0e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001b12:	33e0      	adds	r3, #224	; 0xe0
 8001b14:	443b      	add	r3, r7
 8001b16:	f813 3ce0 	ldrb.w	r3, [r3, #-224]
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001b20:	33e0      	adds	r3, #224	; 0xe0
 8001b22:	443b      	add	r3, r7
 8001b24:	f813 3ce0 	ldrb.w	r3, [r3, #-224]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb51 	bl	80001d0 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b36:	4621      	mov	r1, r4
 8001b38:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <main+0x2c4>)
 8001b3a:	f003 fc77 	bl	800542c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, space, strlen((char*) space), 2000);
 8001b3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fb44 	bl	80001d0 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001b50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b54:	4816      	ldr	r0, [pc, #88]	; (8001bb0 <main+0x2c4>)
 8001b56:	f003 fc69 	bl	800542c <HAL_UART_Transmit>
		  for (uint8_t i = 0; i < buflen; i++) {
 8001b5a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001b64:	e794      	b.n	8001a90 <main+0x1a4>
			  }
		  }
		  lcd.setCursor(0,1);
 8001b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fda0 	bl	80016b4 <_ZN3lcd9setCursorEhh>
		  HAL_UART_Transmit(&huart2, buf, strlen((char*) buf), 2000);
 8001b74:	463b      	mov	r3, r7
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fb2a 	bl	80001d0 <strlen>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4639      	mov	r1, r7
 8001b82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b86:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <main+0x2c4>)
 8001b88:	f003 fc50 	bl	800542c <HAL_UART_Transmit>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001b8c:	e762      	b.n	8001a54 <main+0x168>
 8001b8e:	bf00      	nop
 8001b90:	08006f70 	.word	0x08006f70
 8001b94:	08006f7c 	.word	0x08006f7c
 8001b98:	08006f8c 	.word	0x08006f8c
 8001b9c:	08006f98 	.word	0x08006f98
 8001ba0:	200000a4 	.word	0x200000a4
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	08006f9c 	.word	0x08006f9c
 8001bac:	200001c0 	.word	0x200001c0
 8001bb0:	2000013c 	.word	0x2000013c
 8001bb4:	200000f0 	.word	0x200000f0

08001bb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b096      	sub	sp, #88	; 0x58
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	2244      	movs	r2, #68	; 0x44
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 f992 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bde:	f000 ffef 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001bf2:	f000 fa19 	bl	8002028 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c00:	2310      	movs	r3, #16
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c04:	2302      	movs	r3, #2
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c10:	230a      	movs	r3, #10
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c14:	2307      	movs	r3, #7
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 f821 	bl	8002c6c <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001c3a:	f000 f9f5 	bl	8002028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3e:	230f      	movs	r3, #15
 8001c40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c42:	2303      	movs	r3, #3
 8001c44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	2104      	movs	r1, #4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fbe4 	bl	8003424 <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001c6c:	f000 f9dc 	bl	8002028 <Error_Handler>
  }
}
 8001c70:	bf00      	nop
 8001c72:	3758      	adds	r7, #88	; 0x58
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001c98:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <_ZL12MX_TIM1_Initv+0xc0>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001c9e:	224f      	movs	r2, #79	; 0x4f
 8001ca0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc2:	481c      	ldr	r0, [pc, #112]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001cc4:	f002 fa8e 	bl	80041e4 <HAL_TIM_Base_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8001cd8:	f000 f9a6 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4812      	ldr	r0, [pc, #72]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001cea:	f002 fda5 	bl	8004838 <HAL_TIM_ConfigClockSource>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8001cfe:	f000 f993 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4808      	ldr	r0, [pc, #32]	; (8001d34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001d14:	f003 fa96 	bl	8005244 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8001d28:	f000 f97e 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200000a4 	.word	0x200000a4
 8001d38:	40012c00 	.word	0x40012c00

08001d3c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b091      	sub	sp, #68	; 0x44
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
 8001d6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d6e:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d96:	4838      	ldr	r0, [pc, #224]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001d98:	f002 fa24 	bl	80041e4 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001dac:	f000 f93c 	bl	8002028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	482e      	ldr	r0, [pc, #184]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001dbe:	f002 fd3b 	bl	8004838 <HAL_TIM_ConfigClockSource>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001dd2:	f000 f929 	bl	8002028 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001dd6:	4828      	ldr	r0, [pc, #160]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001dd8:	f002 fb34 	bl	8004444 <HAL_TIM_OC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001dec:	f000 f91c 	bl	8002028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001e00:	f003 fa20 	bl	8005244 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001e14:	f000 f908 	bl	8002028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4812      	ldr	r0, [pc, #72]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001e30:	f002 fc88 	bl	8004744 <HAL_TIM_OC_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf14      	ite	ne
 8001e3a:	2301      	movne	r3, #1
 8001e3c:	2300      	moveq	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001e44:	f000 f8f0 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  uint16_t us=(HAL_RCC_GetHCLKFreq()/8)/driver.speed();
 8001e48:	f001 fc78 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	08dc      	lsrs	r4, r3, #3
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <_ZL12MX_TIM2_Initv+0x140>)
 8001e52:	f7ff fd3f 	bl	80018d4 <_ZN3ASK5speedEv>
 8001e56:	4603      	mov	r3, r0
 8001e58:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  htim2.Instance->CCR1 = us;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
  htim2.Instance->ARR = us - 1;
 8001e66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <_ZL12MX_TIM2_Initv+0x13c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE END TIM2_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3744      	adds	r7, #68	; 0x44
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	200000f0 	.word	0x200000f0
 8001e7c:	200001c0 	.word	0x200001c0

08001e80 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001e8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001ec4:	f003 fa64 	bl	8005390 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001ed8:	f000 f8a6 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000013c 	.word	0x2000013c
 8001ee4:	40004400 	.word	0x40004400

08001ee8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a46      	ldr	r2, [pc, #280]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a40      	ldr	r2, [pc, #256]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a3a      	ldr	r2, [pc, #232]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <_ZL12MX_GPIO_Initv+0x134>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 61ec 	mov.w	r1, #1888	; 0x760
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f68:	f000 fe04 	bl	8002b74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 8001f72:	482b      	ldr	r0, [pc, #172]	; (8002020 <_ZL12MX_GPIO_Initv+0x138>)
 8001f74:	f000 fdfe 	bl	8002b74 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	4829      	ldr	r0, [pc, #164]	; (8002024 <_ZL12MX_GPIO_Initv+0x13c>)
 8001f7e:	f000 fdf9 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	4822      	ldr	r0, [pc, #136]	; (8002024 <_ZL12MX_GPIO_Initv+0x13c>)
 8001f9a:	f000 fc29 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8001f9e:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 8001fa2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f000 fc19 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd4:	f000 fc0c 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001fd8:	f44f 63cf 	mov.w	r3, #1656	; 0x678
 8001fdc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <_ZL12MX_GPIO_Initv+0x138>)
 8001ff2:	f000 fbfd 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <_ZL12MX_GPIO_Initv+0x13c>)
 800200e:	f000 fbef 	bl	80027f0 <HAL_GPIO_Init>

}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	48000400 	.word	0x48000400
 8002024:	48000800 	.word	0x48000800

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002030:	e7fe      	b.n	8002030 <Error_Handler+0x8>
	...

08002034 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af02      	add	r7, sp, #8
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10f      	bne.n	8002064 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204a:	4293      	cmp	r3, r2
 800204c:	d10a      	bne.n	8002064 <_Z41__static_initialization_and_destruction_0ii+0x30>
ASK driver;
 800204e:	2300      	movs	r3, #0
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	230a      	movs	r3, #10
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	230c      	movs	r3, #12
 8002058:	220b      	movs	r2, #11
 800205a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800205e:	4809      	ldr	r0, [pc, #36]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002060:	f7fe fab0 	bl	80005c4 <_ZN3ASKC1Ethhhb>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <_Z41__static_initialization_and_destruction_0ii+0x46>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002070:	4293      	cmp	r3, r2
 8002072:	d102      	bne.n	800207a <_Z41__static_initialization_and_destruction_0ii+0x46>
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002076:	f7fe ffb9 	bl	8000fec <_ZN3ASKD1Ev>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200001c0 	.word	0x200001c0

08002088 <_GLOBAL__sub_I_htim1>:
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
 800208c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff ffcf 	bl	8002034 <_Z41__static_initialization_and_destruction_0ii>
 8002096:	bd80      	pop	{r7, pc}

08002098 <_GLOBAL__sub_D_htim1>:
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
 800209c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff ffc7 	bl	8002034 <_Z41__static_initialization_and_destruction_0ii>
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_MspInit+0x44>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_MspInit+0x44>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_MspInit+0x44>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_MspInit+0x44>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_MspInit+0x44>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_MspInit+0x44>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_TIM_Base_MspInit+0x68>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10c      	bne.n	800211c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800210c:	6613      	str	r3, [r2, #96]	; 0x60
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800211a:	e018      	b.n	800214e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002124:	d113      	bne.n	800214e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_TIM_Base_MspInit+0x6c>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_TIM_Base_MspInit+0x6c>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	201c      	movs	r0, #28
 8002144:	f000 fb1d 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002148:	201c      	movs	r0, #28
 800214a:	f000 fb36 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0ac      	sub	sp, #176	; 0xb0
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2288      	movs	r2, #136	; 0x88
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f003 feb5 	bl	8005ef0 <memset>
  if(huart->Instance==USART2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <HAL_UART_MspInit+0xb0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d13b      	bne.n	8002208 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002190:	2302      	movs	r3, #2
 8002192:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002194:	2300      	movs	r3, #0
 8002196:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fb65 	bl	800386c <HAL_RCCEx_PeriphCLKConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021a8:	f7ff ff3e 	bl	8002028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_UART_MspInit+0xb4>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021dc:	230c      	movs	r3, #12
 80021de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f4:	2307      	movs	r3, #7
 80021f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002204:	f000 faf4 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	37b0      	adds	r7, #176	; 0xb0
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40004400 	.word	0x40004400
 8002214:	40021000 	.word	0x40021000

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 f96e 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	driver.handleTimerInterrupt();
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <TIM2_IRQHandler+0x14>)
 8002272:	f7fe fe97 	bl	8000fa4 <_ZN3ASK20handleTimerInterruptEv>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM2_IRQHandler+0x18>)
 8002278:	f002 f945 	bl	8004506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200001c0 	.word	0x200001c0
 8002284:	200000f0 	.word	0x200000f0

08002288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
	return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022a2:	f003 fddd 	bl	8005e60 <__errno>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
	return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffe7 	bl	8002298 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ca:	e7fe      	b.n	80022ca <_exit+0x12>

080022cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e00a      	b.n	80022f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022de:	f3af 8000 	nop.w
 80022e2:	4601      	mov	r1, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	b2ca      	uxtb	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf0      	blt.n	80022de <_read+0x12>
	}

return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e009      	b.n	800232c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf1      	blt.n	8002318 <_write+0x12>
	}
	return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_close>:

int _close(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002366:	605a      	str	r2, [r3, #4]
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_isatty>:

int _isatty(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	return 1;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
	return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f003 fd42 	bl	8005e60 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20018000 	.word	0x20018000
 8002408:	00000400 	.word	0x00000400
 800240c:	200002c8 	.word	0x200002c8
 8002410:	200002e0 	.word	0x200002e0

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002470 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800243c:	f7ff ffea 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <LoopForever+0x6>)
  ldr r1, =_edata
 8002442:	490d      	ldr	r1, [pc, #52]	; (8002478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <LoopForever+0xe>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002458:	4c0a      	ldr	r4, [pc, #40]	; (8002484 <LoopForever+0x16>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002466:	f003 fd01 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246a:	f7ff fa3f 	bl	80018ec <main>

0800246e <LoopForever>:

LoopForever:
    b LoopForever
 800246e:	e7fe      	b.n	800246e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002470:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800247c:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 8002480:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002484:	200002e0 	.word	0x200002e0

08002488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC1_2_IRQHandler>
	...

0800248c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_Init+0x3c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_Init+0x3c>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a2:	2003      	movs	r0, #3
 80024a4:	f000 f962 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a8:	2000      	movs	r0, #0
 80024aa:	f000 f80f 	bl	80024cc <HAL_InitTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	71fb      	strb	r3, [r7, #7]
 80024b8:	e001      	b.n	80024be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ba:	f7ff fdf5 	bl	80020a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024be:	79fb      	ldrb	r3, [r7, #7]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40022000 	.word	0x40022000

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <HAL_InitTick+0x6c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_InitTick+0x70>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_InitTick+0x6c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f96d 	bl	80027d6 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d809      	bhi.n	800251c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 f937 	bl	8002782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_InitTick+0x74>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e007      	b.n	800252c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e004      	b.n	800252c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e001      	b.n	800252c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000018 	.word	0x20000018
 800253c:	20000010 	.word	0x20000010
 8002540:	20000014 	.word	0x20000014

08002544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x24>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_IncTick+0x24>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000018 	.word	0x20000018
 8002568:	200002cc 	.word	0x200002cc

0800256c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_GetTick+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	200002cc 	.word	0x200002cc

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff ffee 	bl	800256c <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d005      	beq.n	80025aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_Delay+0x44>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025aa:	bf00      	nop
 80025ac:	f7ff ffde 	bl	800256c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d8f7      	bhi.n	80025ac <HAL_Delay+0x28>
  {
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000018 	.word	0x20000018

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff8e 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff29 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff3e 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff8e 	bl	80026c0 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5d 	bl	800266c <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff31 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e17f      	b.n	8002b00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8171 	beq.w	8002afa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x40>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d118      	bne.n	80028d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80ac 	beq.w	8002afa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6613      	str	r3, [r2, #96]	; 0x60
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ba:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_GPIO_Init+0x334>)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x242>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <HAL_GPIO_Init+0x338>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x23e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_GPIO_Init+0x33c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x23a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_GPIO_Init+0x340>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x236>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x344>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x232>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4b      	ldr	r2, [pc, #300]	; (8002b38 <HAL_GPIO_Init+0x348>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x22e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <HAL_GPIO_Init+0x34c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x22a>
 8002a16:	2306      	movs	r3, #6
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a32:	2300      	movs	r3, #0
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a44:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a76:	4a32      	ldr	r2, [pc, #200]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f47f ae78 	bne.w	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	48000400 	.word	0x48000400
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	48000c00 	.word	0x48000c00
 8002b34:	48001000 	.word	0x48001000
 8002b38:	48001400 	.word	0x48001400
 8002b3c:	48001800 	.word	0x48001800
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
 8002b60:	e001      	b.n	8002b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40007000 	.word	0x40007000

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bce:	d130      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bdc:	d038      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2232      	movs	r2, #50	; 0x32
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c04:	e002      	b.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d102      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2c:	d110      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d007      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c48:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40007000 	.word	0x40007000
 8002c64:	20000010 	.word	0x20000010
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e3ca      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b97      	ldr	r3, [pc, #604]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b94      	ldr	r3, [pc, #592]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80e4 	beq.w	8002e68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4a>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	f040 808b 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 8087 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb6:	4b89      	ldr	r3, [pc, #548]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e3a2      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x7c>
 8002cde:	4b7f      	ldr	r3, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCC_OscConfig+0x88>
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d223      	bcs.n	8002d40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fd55 	bl	80037ac <RCC_SetFlashLatencyFromMSIRange>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e383      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a72      	ldr	r2, [pc, #456]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	496d      	ldr	r1, [pc, #436]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2a:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	4968      	ldr	r1, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 8002d3e:	e025      	b.n	8002d8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4960      	ldr	r1, [pc, #384]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	495b      	ldr	r1, [pc, #364]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fd15 	bl	80037ac <RCC_SetFlashLatencyFromMSIRange>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e343      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d8c:	f000 fc4a 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4950      	ldr	r1, [pc, #320]	; (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <HAL_RCC_OscConfig+0x278>)
 8002daa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fb8b 	bl	80024cc <HAL_InitTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d052      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	e327      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d032      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dcc:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a42      	ldr	r2, [pc, #264]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff fbc8 	bl	800256c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de0:	f7ff fbc4 	bl	800256c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e310      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a36      	ldr	r2, [pc, #216]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4931      	ldr	r1, [pc, #196]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	492c      	ldr	r1, [pc, #176]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
 8002e30:	e01a      	b.n	8002e68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3e:	f7ff fb95 	bl	800256c <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e46:	f7ff fb91 	bl	800256c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e2dd      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1da>
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d074      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x21a>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d10e      	bne.n	8002e9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d064      	beq.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d160      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e2ba      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x24a>
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e026      	b.n	8002f04 <HAL_RCC_OscConfig+0x298>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x280>
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a05      	ldr	r2, [pc, #20]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x298>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	080070b4 	.word	0x080070b4
 8002ee4:	20000010 	.word	0x20000010
 8002ee8:	20000014 	.word	0x20000014
 8002eec:	4ba0      	ldr	r3, [pc, #640]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a9f      	ldr	r2, [pc, #636]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b9d      	ldr	r3, [pc, #628]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9c      	ldr	r2, [pc, #624]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fb2e 	bl	800256c <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7ff fb2a 	bl	800256c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e276      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	4b92      	ldr	r3, [pc, #584]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2a8>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7ff fb1a 	bl	800256c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7ff fb16 	bl	800256c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e262      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4e:	4b88      	ldr	r3, [pc, #544]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2d0>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d060      	beq.n	800302c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x310>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d119      	bne.n	8002faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d116      	bne.n	8002faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	4b7c      	ldr	r3, [pc, #496]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_OscConfig+0x328>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e23f      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b76      	ldr	r3, [pc, #472]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	4973      	ldr	r1, [pc, #460]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	e040      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7ff fad5 	bl	800256c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7ff fad1 	bl	800256c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e21d      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd8:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	495f      	ldr	r1, [pc, #380]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	e018      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7ff fab1 	bl	800256c <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7ff faad 	bl	800256c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1f9      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003040:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	4a4a      	ldr	r2, [pc, #296]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7ff fa8c 	bl	800256c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7ff fa88 	bl	800256c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1d4      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306a:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 800306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ef      	beq.n	8003058 <HAL_RCC_OscConfig+0x3ec>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003080:	4a3b      	ldr	r2, [pc, #236]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7ff fa6f 	bl	800256c <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003092:	f7ff fa6b 	bl	800256c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1b7      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a6 	beq.w	800320c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10d      	bne.n	80030ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030da:	6593      	str	r3, [r2, #88]	; 0x58
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x508>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d118      	bne.n	800312a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x508>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_RCC_OscConfig+0x508>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003104:	f7ff fa32 	bl	800256c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7ff fa2e 	bl	800256c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e17a      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCC_OscConfig+0x508>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x4d8>
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003142:	e029      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d115      	bne.n	8003178 <HAL_RCC_OscConfig+0x50c>
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a07      	ldr	r2, [pc, #28]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_RCC_OscConfig+0x504>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800316c:	e014      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	40007000 	.word	0x40007000
 8003178:	4b9c      	ldr	r3, [pc, #624]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a9b      	ldr	r2, [pc, #620]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003188:	4b98      	ldr	r3, [pc, #608]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	4a97      	ldr	r2, [pc, #604]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7ff f9e4 	bl	800256c <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7ff f9e0 	bl	800256c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e12a      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	4b8b      	ldr	r3, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ed      	beq.n	80031a8 <HAL_RCC_OscConfig+0x53c>
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7ff f9cd 	bl	800256c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7ff f9c9 	bl	800256c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e113      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ed      	bne.n	80031d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80fe 	beq.w	8003412 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 80d0 	bne.w	80033c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003220:	4b72      	ldr	r3, [pc, #456]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d130      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	3b01      	subs	r3, #1
 8003240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d127      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11f      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003260:	2a07      	cmp	r2, #7
 8003262:	bf14      	ite	ne
 8003264:	2201      	movne	r2, #1
 8003266:	2200      	moveq	r2, #0
 8003268:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326a:	4293      	cmp	r3, r2
 800326c:	d113      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d109      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d06e      	beq.n	8003374 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d069      	beq.n	8003370 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0ad      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032b8:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a4b      	ldr	r2, [pc, #300]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c4:	f7ff f952 	bl	800256c <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7ff f94e 	bl	800256c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e09a      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <HAL_RCC_OscConfig+0x784>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032fa:	3a01      	subs	r2, #1
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003304:	0212      	lsls	r2, r2, #8
 8003306:	4311      	orrs	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330c:	0852      	lsrs	r2, r2, #1
 800330e:	3a01      	subs	r2, #1
 8003310:	0552      	lsls	r2, r2, #21
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	0652      	lsls	r2, r2, #25
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003324:	0912      	lsrs	r2, r2, #4
 8003326:	0452      	lsls	r2, r2, #17
 8003328:	430a      	orrs	r2, r1
 800332a:	4930      	ldr	r1, [pc, #192]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003330:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003348:	f7ff f910 	bl	800256c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7ff f90c 	bl	800256c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e058      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336e:	e050      	b.n	8003412 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e04f      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d148      	bne.n	8003412 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003398:	f7ff f8e8 	bl	800256c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff f8e4 	bl	800256c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e030      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x734>
 80033be:	e028      	b.n	8003412 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d023      	beq.n	800340e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCC_OscConfig+0x780>)
 80033cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7ff f8cb 	bl	800256c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d8:	e00c      	b.n	80033f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033da:	f7ff f8c7 	bl	800256c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d905      	bls.n	80033f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e013      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
 80033ec:	40021000 	.word	0x40021000
 80033f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_OscConfig+0x7b0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ec      	bne.n	80033da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x7b0>)
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4905      	ldr	r1, [pc, #20]	; (800341c <HAL_RCC_OscConfig+0x7b0>)
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_OscConfig+0x7b4>)
 8003408:	4013      	ands	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
 800340c:	e001      	b.n	8003412 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	feeefffc 	.word	0xfeeefffc

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0e7      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b75      	ldr	r3, [pc, #468]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b72      	ldr	r3, [pc, #456]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4970      	ldr	r1, [pc, #448]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b6e      	ldr	r3, [pc, #440]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0cf      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003480:	429a      	cmp	r2, r3
 8003482:	d908      	bls.n	8003496 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4960      	ldr	r1, [pc, #384]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04c      	beq.n	800353c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034aa:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d121      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0a6      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c2:	4b54      	ldr	r3, [pc, #336]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d115      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e09a      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034da:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08e      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e086      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b46      	ldr	r3, [pc, #280]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4943      	ldr	r1, [pc, #268]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350c:	f7ff f82e 	bl	800256c <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7ff f82a 	bl	800256c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e06e      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003554:	429a      	cmp	r2, r3
 8003556:	d208      	bcs.n	800356a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	492b      	ldr	r1, [pc, #172]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d210      	bcs.n	800359a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 0207 	bic.w	r2, r3, #7
 8003580:	4923      	ldr	r1, [pc, #140]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e036      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4918      	ldr	r1, [pc, #96]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4910      	ldr	r1, [pc, #64]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035d8:	f000 f824 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	490b      	ldr	r1, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1f4>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1fc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff65 	bl	80024cc <HAL_InitTick>
 8003602:	4603      	mov	r3, r0
 8003604:	72fb      	strb	r3, [r7, #11]

  return status;
 8003606:	7afb      	ldrb	r3, [r7, #11]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40022000 	.word	0x40022000
 8003614:	40021000 	.word	0x40021000
 8003618:	080070b4 	.word	0x080070b4
 800361c:	20000010 	.word	0x20000010
 8003620:	20000014 	.word	0x20000014

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4b3b      	ldr	r3, [pc, #236]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d121      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d11e      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003658:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003664:	4b31      	ldr	r3, [pc, #196]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e005      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003680:	4a2b      	ldr	r2, [pc, #172]	; (8003730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b04      	cmp	r3, #4
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_GetSysClockFreq+0x110>)
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e004      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_RCC_GetSysClockFreq+0x114>)
 80036aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d134      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0xa6>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d003      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xac>
 80036c8:	e005      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036ca:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <HAL_RCC_GetSysClockFreq+0x110>)
 80036cc:	617b      	str	r3, [r7, #20]
      break;
 80036ce:	e005      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_RCC_GetSysClockFreq+0x114>)
 80036d2:	617b      	str	r3, [r7, #20]
      break;
 80036d4:	e002      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036dc:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	3301      	adds	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	fb03 f202 	mul.w	r2, r3, r2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	0e5b      	lsrs	r3, r3, #25
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	3301      	adds	r3, #1
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800371c:	69bb      	ldr	r3, [r7, #24]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	080070cc 	.word	0x080070cc
 8003734:	00f42400 	.word	0x00f42400
 8003738:	007a1200 	.word	0x007a1200

0800373c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000010 	.word	0x20000010

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4904      	ldr	r1, [pc, #16]	; (800377c <HAL_RCC_GetPCLK1Freq+0x28>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	080070c4 	.word	0x080070c4

08003780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003784:	f7ff ffda 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0adb      	lsrs	r3, r3, #11
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	080070c4 	.word	0x080070c4

080037ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037c4:	f7ff f9ee 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 80037c8:	6178      	str	r0, [r7, #20]
 80037ca:	e014      	b.n	80037f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6593      	str	r3, [r2, #88]	; 0x58
 80037d8:	4b22      	ldr	r3, [pc, #136]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037e4:	f7ff f9de 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 80037e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fc:	d10b      	bne.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d919      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2ba0      	cmp	r3, #160	; 0xa0
 8003808:	d902      	bls.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800380a:	2302      	movs	r3, #2
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	e013      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003810:	2301      	movs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e010      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d902      	bls.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800381c:	2303      	movs	r3, #3
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e00a      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b80      	cmp	r3, #128	; 0x80
 8003826:	d102      	bne.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003828:	2302      	movs	r3, #2
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e004      	b.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d101      	bne.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003834:	2301      	movs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 0207 	bic.w	r2, r3, #7
 8003840:	4909      	ldr	r1, [pc, #36]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003848:	4b07      	ldr	r3, [pc, #28]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	40022000 	.word	0x40022000

0800386c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003874:	2300      	movs	r3, #0
 8003876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003878:	2300      	movs	r3, #0
 800387a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003884:	2b00      	cmp	r3, #0
 8003886:	d041      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003890:	d02a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003892:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003896:	d824      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800389c:	d008      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800389e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038a2:	d81e      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ac:	d010      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038ae:	e018      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038b0:	4b86      	ldr	r3, [pc, #536]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a85      	ldr	r2, [pc, #532]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038bc:	e015      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fabb 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ce:	e00c      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3320      	adds	r3, #32
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fba6 	bl	8004028 <RCCEx_PLLSAI2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	74fb      	strb	r3, [r7, #19]
      break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ea:	7cfb      	ldrb	r3, [r7, #19]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f0:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038fe:	4973      	ldr	r1, [pc, #460]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003906:	e001      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d041      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800391c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003920:	d02a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003926:	d824      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800392e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003932:	d81e      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d010      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800393e:	e018      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003940:	4b62      	ldr	r3, [pc, #392]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a61      	ldr	r2, [pc, #388]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800394c:	e015      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fa73 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3320      	adds	r3, #32
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fb5e 	bl	8004028 <RCCEx_PLLSAI2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	74fb      	strb	r3, [r7, #19]
      break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003980:	4b52      	ldr	r3, [pc, #328]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800398e:	494f      	ldr	r1, [pc, #316]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80a0 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	4a40      	ldr	r2, [pc, #256]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ce:	6593      	str	r3, [r2, #88]	; 0x58
 80039d0:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039dc:	2301      	movs	r3, #1
 80039de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3a      	ldr	r2, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ec:	f7fe fdbe 	bl	800256c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fe fdba 	bl	800256c <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d902      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	74fb      	strb	r3, [r7, #19]
        break;
 8003a06:	e005      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a08:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ef      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d15c      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d019      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	4a20      	ldr	r2, [pc, #128]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a64:	4a19      	ldr	r2, [pc, #100]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe fd79 	bl	800256c <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7c:	e00b      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe fd75 	bl	800256c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d902      	bls.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	74fb      	strb	r3, [r7, #19]
            break;
 8003a94:	e006      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ec      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	4904      	ldr	r1, [pc, #16]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ac2:	e009      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad8:	7c7b      	ldrb	r3, [r7, #17]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d105      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ade:	4b9e      	ldr	r3, [pc, #632]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	4a9d      	ldr	r2, [pc, #628]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af6:	4b98      	ldr	r3, [pc, #608]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f023 0203 	bic.w	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	4994      	ldr	r1, [pc, #592]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 020c 	bic.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	498c      	ldr	r1, [pc, #560]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b3a:	4b87      	ldr	r3, [pc, #540]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4983      	ldr	r1, [pc, #524]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b5c:	4b7e      	ldr	r3, [pc, #504]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	497b      	ldr	r1, [pc, #492]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b7e:	4b76      	ldr	r3, [pc, #472]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	4972      	ldr	r1, [pc, #456]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	496a      	ldr	r1, [pc, #424]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc2:	4b65      	ldr	r3, [pc, #404]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	4961      	ldr	r1, [pc, #388]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be4:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	4959      	ldr	r1, [pc, #356]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c06:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	4950      	ldr	r1, [pc, #320]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	4948      	ldr	r1, [pc, #288]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	493f      	ldr	r1, [pc, #252]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d028      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6c:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	4937      	ldr	r1, [pc, #220]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c8c:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a31      	ldr	r2, [pc, #196]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	60d3      	str	r3, [r2, #12]
 8003c98:	e011      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ca2:	d10c      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f8c8 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cca:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	491f      	ldr	r1, [pc, #124]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cea:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf4:	60d3      	str	r3, [r2, #12]
 8003cf6:	e011      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2101      	movs	r1, #1
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f899 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	4908      	ldr	r1, [pc, #32]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d46:	d109      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
 8003d54:	e014      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f867 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02f      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9a:	4928      	ldr	r1, [pc, #160]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003daa:	d10d      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f844 	bl	8003e40 <RCCEx_PLLSAI1_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d014      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dc2:	7cfb      	ldrb	r3, [r7, #19]
 8003dc4:	74bb      	strb	r3, [r7, #18]
 8003dc6:	e011      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3320      	adds	r3, #32
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f925 	bl	8004028 <RCCEx_PLLSAI2_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e06:	490d      	ldr	r1, [pc, #52]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2a:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e32:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000

08003e40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e4e:	4b75      	ldr	r3, [pc, #468]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e5a:	4b72      	ldr	r3, [pc, #456]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d10d      	bne.n	8003e86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e72:	4b6c      	ldr	r3, [pc, #432]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
       ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d047      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	e044      	b.n	8003f16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d018      	beq.n	8003ec6 <RCCEx_PLLSAI1_Config+0x86>
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d825      	bhi.n	8003ee4 <RCCEx_PLLSAI1_Config+0xa4>
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d002      	beq.n	8003ea2 <RCCEx_PLLSAI1_Config+0x62>
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d009      	beq.n	8003eb4 <RCCEx_PLLSAI1_Config+0x74>
 8003ea0:	e020      	b.n	8003ee4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ea2:	4b60      	ldr	r3, [pc, #384]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11d      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb2:	e01a      	b.n	8003eea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eb4:	4b5b      	ldr	r3, [pc, #364]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d116      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec4:	e013      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ec6:	4b57      	ldr	r3, [pc, #348]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ed2:	4b54      	ldr	r3, [pc, #336]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ee2:	e006      	b.n	8003ef2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e004      	b.n	8003ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003efa:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6819      	ldr	r1, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	4944      	ldr	r1, [pc, #272]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d17d      	bne.n	8004018 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f1c:	4b41      	ldr	r3, [pc, #260]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a40      	ldr	r2, [pc, #256]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f28:	f7fe fb20 	bl	800256c <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f2e:	e009      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f30:	f7fe fb1c 	bl	800256c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d902      	bls.n	8003f44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	73fb      	strb	r3, [r7, #15]
        break;
 8003f42:	e005      	b.n	8003f50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f44:	4b37      	ldr	r3, [pc, #220]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ef      	bne.n	8003f30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d160      	bne.n	8004018 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d111      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f5c:	4b31      	ldr	r3, [pc, #196]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6892      	ldr	r2, [r2, #8]
 8003f6c:	0211      	lsls	r1, r2, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68d2      	ldr	r2, [r2, #12]
 8003f72:	0912      	lsrs	r2, r2, #4
 8003f74:	0452      	lsls	r2, r2, #17
 8003f76:	430a      	orrs	r2, r1
 8003f78:	492a      	ldr	r1, [pc, #168]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	610b      	str	r3, [r1, #16]
 8003f7e:	e027      	b.n	8003fd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d112      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6892      	ldr	r2, [r2, #8]
 8003f96:	0211      	lsls	r1, r2, #8
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6912      	ldr	r2, [r2, #16]
 8003f9c:	0852      	lsrs	r2, r2, #1
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	0552      	lsls	r2, r2, #21
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	491f      	ldr	r1, [pc, #124]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]
 8003faa:	e011      	b.n	8003fd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fac:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6892      	ldr	r2, [r2, #8]
 8003fbc:	0211      	lsls	r1, r2, #8
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6952      	ldr	r2, [r2, #20]
 8003fc2:	0852      	lsrs	r2, r2, #1
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	0652      	lsls	r2, r2, #25
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	4916      	ldr	r1, [pc, #88]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fac6 	bl	800256c <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fe2:	e009      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe4:	f7fe fac2 	bl	800256c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d902      	bls.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff6:	e005      	b.n	8004004 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	4904      	ldr	r1, [pc, #16]	; (8004024 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004014:	4313      	orrs	r3, r2
 8004016:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000

08004028 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004036:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d018      	beq.n	8004074 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004042:	4b67      	ldr	r3, [pc, #412]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0203 	and.w	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d10d      	bne.n	800406e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
       ||
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800405a:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
       ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d047      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
 8004072:	e044      	b.n	80040fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d018      	beq.n	80040ae <RCCEx_PLLSAI2_Config+0x86>
 800407c:	2b03      	cmp	r3, #3
 800407e:	d825      	bhi.n	80040cc <RCCEx_PLLSAI2_Config+0xa4>
 8004080:	2b01      	cmp	r3, #1
 8004082:	d002      	beq.n	800408a <RCCEx_PLLSAI2_Config+0x62>
 8004084:	2b02      	cmp	r3, #2
 8004086:	d009      	beq.n	800409c <RCCEx_PLLSAI2_Config+0x74>
 8004088:	e020      	b.n	80040cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800408a:	4b55      	ldr	r3, [pc, #340]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11d      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409a:	e01a      	b.n	80040d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800409c:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d116      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e013      	b.n	80040d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ae:	4b4c      	ldr	r3, [pc, #304]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ba:	4b49      	ldr	r3, [pc, #292]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040ca:	e006      	b.n	80040da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e004      	b.n	80040dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040da:	bf00      	nop
    }

    if(status == HAL_OK)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10d      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	430b      	orrs	r3, r1
 80040f8:	4939      	ldr	r1, [pc, #228]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d167      	bne.n	80041d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004104:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fe fa2c 	bl	800256c <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004116:	e009      	b.n	800412c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004118:	f7fe fa28 	bl	800256c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	73fb      	strb	r3, [r7, #15]
        break;
 800412a:	e005      	b.n	8004138 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ef      	bne.n	8004118 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d14a      	bne.n	80041d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d111      	bne.n	8004168 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004144:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800414c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6892      	ldr	r2, [r2, #8]
 8004154:	0211      	lsls	r1, r2, #8
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	0912      	lsrs	r2, r2, #4
 800415c:	0452      	lsls	r2, r2, #17
 800415e:	430a      	orrs	r2, r1
 8004160:	491f      	ldr	r1, [pc, #124]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	614b      	str	r3, [r1, #20]
 8004166:	e011      	b.n	800418c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004170:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6892      	ldr	r2, [r2, #8]
 8004178:	0211      	lsls	r1, r2, #8
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6912      	ldr	r2, [r2, #16]
 800417e:	0852      	lsrs	r2, r2, #1
 8004180:	3a01      	subs	r2, #1
 8004182:	0652      	lsls	r2, r2, #25
 8004184:	430a      	orrs	r2, r1
 8004186:	4916      	ldr	r1, [pc, #88]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	4313      	orrs	r3, r2
 800418a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800418c:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fe f9e8 	bl	800256c <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800419e:	e009      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041a0:	f7fe f9e4 	bl	800256c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d902      	bls.n	80041b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	73fb      	strb	r3, [r7, #15]
          break;
 80041b2:	e005      	b.n	80041c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ef      	beq.n	80041a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4904      	ldr	r1, [pc, #16]	; (80041e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000

080041e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e049      	b.n	800428a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd ff70 	bl	80020f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f000 fc04 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d001      	beq.n	80042ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e047      	b.n	800433c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a23      	ldr	r2, [pc, #140]	; (8004348 <HAL_TIM_Base_Start+0xb4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d01d      	beq.n	80042fa <HAL_TIM_Base_Start+0x66>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c6:	d018      	beq.n	80042fa <HAL_TIM_Base_Start+0x66>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_TIM_Base_Start+0xb8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_TIM_Base_Start+0x66>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_TIM_Base_Start+0xbc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIM_Base_Start+0x66>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_TIM_Base_Start+0xc0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_TIM_Base_Start+0x66>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_TIM_Base_Start+0xc4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIM_Base_Start+0x66>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_TIM_Base_Start+0xc8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d115      	bne.n	8004326 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_TIM_Base_Start+0xcc>)
 8004302:	4013      	ands	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d015      	beq.n	8004338 <HAL_TIM_Base_Start+0xa4>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004312:	d011      	beq.n	8004338 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	e008      	b.n	8004338 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e000      	b.n	800433a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40014000 	.word	0x40014000
 8004360:	00010007 	.word	0x00010007

08004364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e04f      	b.n	800441c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a23      	ldr	r2, [pc, #140]	; (8004428 <HAL_TIM_Base_Start_IT+0xc4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01d      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x76>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a6:	d018      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x76>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_TIM_Base_Start_IT+0xc8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x76>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <HAL_TIM_Base_Start_IT+0xcc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x76>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_TIM_Base_Start_IT+0xd0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x76>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <HAL_TIM_Base_Start_IT+0xd4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_TIM_Base_Start_IT+0x76>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a19      	ldr	r2, [pc, #100]	; (800443c <HAL_TIM_Base_Start_IT+0xd8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d115      	bne.n	8004406 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	4b17      	ldr	r3, [pc, #92]	; (8004440 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d015      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0xb4>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d011      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	e008      	b.n	8004418 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e000      	b.n	800441a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40013400 	.word	0x40013400
 800443c:	40014000 	.word	0x40014000
 8004440:	00010007 	.word	0x00010007

08004444 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e049      	b.n	80044ea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f841 	bl	80044f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f000 fad4 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d122      	bne.n	8004562 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d11b      	bne.n	8004562 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0202 	mvn.w	r2, #2
 8004532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa52 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 800454e:	e005      	b.n	800455c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fa44 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa55 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d122      	bne.n	80045b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d11b      	bne.n	80045b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0204 	mvn.w	r2, #4
 8004586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fa28 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80045a2:	e005      	b.n	80045b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fa1a 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa2b 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d122      	bne.n	800460a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11b      	bne.n	800460a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0208 	mvn.w	r2, #8
 80045da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2204      	movs	r2, #4
 80045e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f9fe 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80045f6:	e005      	b.n	8004604 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f9f0 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa01 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d122      	bne.n	800465e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b10      	cmp	r3, #16
 8004624:	d11b      	bne.n	800465e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0210 	mvn.w	r2, #16
 800462e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2208      	movs	r2, #8
 8004634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f9d4 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 800464a:	e005      	b.n	8004658 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f9c6 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9d7 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d10e      	bne.n	800468a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f06f 0201 	mvn.w	r2, #1
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f9a0 	bl	80049ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fe59 	bl	8005368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d107      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fe4c 	bl	800537c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f985 	bl	8004a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fe0c 	bl	8005354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_TIM_OC_ConfigChannel+0x1e>
 800475e:	2302      	movs	r3, #2
 8004760:	e066      	b.n	8004830 <HAL_TIM_OC_ConfigChannel+0xec>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b14      	cmp	r3, #20
 800476e:	d857      	bhi.n	8004820 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047cd 	.word	0x080047cd
 800477c:	08004821 	.word	0x08004821
 8004780:	08004821 	.word	0x08004821
 8004784:	08004821 	.word	0x08004821
 8004788:	080047db 	.word	0x080047db
 800478c:	08004821 	.word	0x08004821
 8004790:	08004821 	.word	0x08004821
 8004794:	08004821 	.word	0x08004821
 8004798:	080047e9 	.word	0x080047e9
 800479c:	08004821 	.word	0x08004821
 80047a0:	08004821 	.word	0x08004821
 80047a4:	08004821 	.word	0x08004821
 80047a8:	080047f7 	.word	0x080047f7
 80047ac:	08004821 	.word	0x08004821
 80047b0:	08004821 	.word	0x08004821
 80047b4:	08004821 	.word	0x08004821
 80047b8:	08004805 	.word	0x08004805
 80047bc:	08004821 	.word	0x08004821
 80047c0:	08004821 	.word	0x08004821
 80047c4:	08004821 	.word	0x08004821
 80047c8:	08004813 	.word	0x08004813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f9c6 	bl	8004b64 <TIM_OC1_SetConfig>
      break;
 80047d8:	e025      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa4f 	bl	8004c84 <TIM_OC2_SetConfig>
      break;
 80047e6:	e01e      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fad2 	bl	8004d98 <TIM_OC3_SetConfig>
      break;
 80047f4:	e017      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fb53 	bl	8004ea8 <TIM_OC4_SetConfig>
      break;
 8004802:	e010      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fbb6 	bl	8004f7c <TIM_OC5_SetConfig>
      break;
 8004810:	e009      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fc13 	bl	8005044 <TIM_OC6_SetConfig>
      break;
 800481e:	e002      	b.n	8004826 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	75fb      	strb	r3, [r7, #23]
      break;
 8004824:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800482e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_TIM_ConfigClockSource+0x1c>
 8004850:	2302      	movs	r3, #2
 8004852:	e0b6      	b.n	80049c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d03e      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xd8>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	f200 8087 	bhi.w	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	f000 8086 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x176>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d87f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048a8:	2b70      	cmp	r3, #112	; 0x70
 80048aa:	d01a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xaa>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d87b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d050      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x11e>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d877      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d03c      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xfe>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d873      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d058      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0x13e>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d86f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048c8:	2b30      	cmp	r3, #48	; 0x30
 80048ca:	d064      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15e>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d86b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d060      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15e>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d867      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05c      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15e>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d05a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15e>
 80048e0:	e062      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6899      	ldr	r1, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f000 fc87 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	609a      	str	r2, [r3, #8]
      break;
 800490e:	e04f      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 fc70 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e03c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 fbe4 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2150      	movs	r1, #80	; 0x50
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fc3d 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004954:	e02c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	f000 fc03 	bl	800516e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2160      	movs	r1, #96	; 0x60
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fc2d 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004974:	e01c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 fbc4 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fc1d 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004994:	e00c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f000 fc14 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 80049a6:	e003      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e000      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a40      	ldr	r2, [pc, #256]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00f      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3d      	ldr	r2, [pc, #244]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3c      	ldr	r2, [pc, #240]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3b      	ldr	r2, [pc, #236]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01f      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d01b      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d017      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00f      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a29      	ldr	r2, [pc, #164]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_Base_SetConfig+0x9a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f023 0201 	bic.w	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0302 	bic.w	r3, r3, #2
 8004bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a2c      	ldr	r2, [pc, #176]	; (8004c70 <TIM_OC1_SetConfig+0x10c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00f      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a2b      	ldr	r2, [pc, #172]	; (8004c74 <TIM_OC1_SetConfig+0x110>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <TIM_OC1_SetConfig+0x114>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <TIM_OC1_SetConfig+0x118>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0x80>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <TIM_OC1_SetConfig+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <TIM_OC1_SetConfig+0x10c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <TIM_OC1_SetConfig+0x110>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <TIM_OC1_SetConfig+0x114>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <TIM_OC1_SetConfig+0x118>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC1_SetConfig+0xc2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <TIM_OC1_SetConfig+0x11c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d111      	bne.n	8004c4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	621a      	str	r2, [r3, #32]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800

08004c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f023 0210 	bic.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0320 	bic.w	r3, r3, #32
 8004cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a28      	ldr	r2, [pc, #160]	; (8004d84 <TIM_OC2_SetConfig+0x100>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC2_SetConfig+0x6c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <TIM_OC2_SetConfig+0x104>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10d      	bne.n	8004d0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_OC2_SetConfig+0x100>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <TIM_OC2_SetConfig+0x104>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <TIM_OC2_SetConfig+0x108>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <TIM_OC2_SetConfig+0x10c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC2_SetConfig+0xb0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <TIM_OC2_SetConfig+0x110>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40013400 	.word	0x40013400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800

08004d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <TIM_OC3_SetConfig+0xfc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_OC3_SetConfig+0x6a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <TIM_OC3_SetConfig+0x100>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10d      	bne.n	8004e1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <TIM_OC3_SetConfig+0xfc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00f      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <TIM_OC3_SetConfig+0x100>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00b      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <TIM_OC3_SetConfig+0x104>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d007      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <TIM_OC3_SetConfig+0x108>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC3_SetConfig+0xae>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <TIM_OC3_SetConfig+0x10c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d113      	bne.n	8004e6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	031b      	lsls	r3, r3, #12
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <TIM_OC4_SetConfig+0xc0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00f      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <TIM_OC4_SetConfig+0xc4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <TIM_OC4_SetConfig+0xc8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <TIM_OC4_SetConfig+0xcc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC4_SetConfig+0x84>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <TIM_OC4_SetConfig+0xd0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d109      	bne.n	8004f40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800

08004f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	041b      	lsls	r3, r3, #16
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <TIM_OC5_SetConfig+0xb4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <TIM_OC5_SetConfig+0xb8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a15      	ldr	r2, [pc, #84]	; (8005038 <TIM_OC5_SetConfig+0xbc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <TIM_OC5_SetConfig+0xc0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_OC5_SetConfig+0x7a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <TIM_OC5_SetConfig+0xc4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d109      	bne.n	800500a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40013400 	.word	0x40013400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800

08005044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800508a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <TIM_OC6_SetConfig+0xb8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00f      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a17      	ldr	r2, [pc, #92]	; (8005100 <TIM_OC6_SetConfig+0xbc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC6_SetConfig+0xc0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a15      	ldr	r2, [pc, #84]	; (8005108 <TIM_OC6_SetConfig+0xc4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC6_SetConfig+0x7c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a14      	ldr	r2, [pc, #80]	; (800510c <TIM_OC6_SetConfig+0xc8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d109      	bne.n	80050d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40013400 	.word	0x40013400
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 030a 	bic.w	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0210 	bic.w	r2, r3, #16
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f043 0307 	orr.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005258:	2302      	movs	r3, #2
 800525a:	e068      	b.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01d      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d018      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00e      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d009      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a14      	ldr	r2, [pc, #80]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10c      	bne.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4313      	orrs	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40013400 	.word	0x40013400
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40014000 	.word	0x40014000

08005354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e040      	b.n	8005424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc fed4 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0201 	bic.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8c0 	bl	8005554 <UART_SetConfig>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e022      	b.n	8005424 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fb6c 	bl	8005ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800540a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fbf3 	bl	8005c08 <UART_CheckIdleState>
 8005422:	4603      	mov	r3, r0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005440:	2b20      	cmp	r3, #32
 8005442:	f040 8082 	bne.w	800554a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_UART_Transmit+0x26>
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07a      	b.n	800554c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_UART_Transmit+0x38>
 8005460:	2302      	movs	r3, #2
 8005462:	e073      	b.n	800554c <HAL_UART_Transmit+0x120>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2221      	movs	r2, #33	; 0x21
 8005478:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800547a:	f7fd f877 	bl	800256c <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d108      	bne.n	80054ac <HAL_UART_Transmit+0x80>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e003      	b.n	80054b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80054bc:	e02d      	b.n	800551a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fbe6 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e039      	b.n	800554c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	881a      	ldrh	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ea:	b292      	uxth	r2, r2
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	3302      	adds	r3, #2
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	e008      	b.n	8005508 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	b292      	uxth	r2, r2
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1cb      	bne.n	80054be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2200      	movs	r2, #0
 800552e:	2140      	movs	r1, #64	; 0x40
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fbb2 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e005      	b.n	800554c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e000      	b.n	800554c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800554a:	2302      	movs	r3, #2
  }
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b08a      	sub	sp, #40	; 0x28
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	4313      	orrs	r3, r2
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4ba4      	ldr	r3, [pc, #656]	; (8005814 <UART_SetConfig+0x2c0>)
 8005584:	4013      	ands	r3, r2
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800558c:	430b      	orrs	r3, r1
 800558e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a99      	ldr	r2, [pc, #612]	; (8005818 <UART_SetConfig+0x2c4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	4313      	orrs	r3, r2
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a90      	ldr	r2, [pc, #576]	; (800581c <UART_SetConfig+0x2c8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d126      	bne.n	800562c <UART_SetConfig+0xd8>
 80055de:	4b90      	ldr	r3, [pc, #576]	; (8005820 <UART_SetConfig+0x2cc>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d81b      	bhi.n	8005624 <UART_SetConfig+0xd0>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0xa0>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005605 	.word	0x08005605
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	0800561d 	.word	0x0800561d
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e116      	b.n	800583a <UART_SetConfig+0x2e6>
 800560c:	2302      	movs	r3, #2
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e112      	b.n	800583a <UART_SetConfig+0x2e6>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e10e      	b.n	800583a <UART_SetConfig+0x2e6>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e10a      	b.n	800583a <UART_SetConfig+0x2e6>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e106      	b.n	800583a <UART_SetConfig+0x2e6>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a7c      	ldr	r2, [pc, #496]	; (8005824 <UART_SetConfig+0x2d0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d138      	bne.n	80056a8 <UART_SetConfig+0x154>
 8005636:	4b7a      	ldr	r3, [pc, #488]	; (8005820 <UART_SetConfig+0x2cc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f003 030c 	and.w	r3, r3, #12
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d82d      	bhi.n	80056a0 <UART_SetConfig+0x14c>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <UART_SetConfig+0xf8>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	08005681 	.word	0x08005681
 8005650:	080056a1 	.word	0x080056a1
 8005654:	080056a1 	.word	0x080056a1
 8005658:	080056a1 	.word	0x080056a1
 800565c:	08005691 	.word	0x08005691
 8005660:	080056a1 	.word	0x080056a1
 8005664:	080056a1 	.word	0x080056a1
 8005668:	080056a1 	.word	0x080056a1
 800566c:	08005689 	.word	0x08005689
 8005670:	080056a1 	.word	0x080056a1
 8005674:	080056a1 	.word	0x080056a1
 8005678:	080056a1 	.word	0x080056a1
 800567c:	08005699 	.word	0x08005699
 8005680:	2300      	movs	r3, #0
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e0d8      	b.n	800583a <UART_SetConfig+0x2e6>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800568e:	e0d4      	b.n	800583a <UART_SetConfig+0x2e6>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005696:	e0d0      	b.n	800583a <UART_SetConfig+0x2e6>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800569e:	e0cc      	b.n	800583a <UART_SetConfig+0x2e6>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e0c8      	b.n	800583a <UART_SetConfig+0x2e6>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5e      	ldr	r2, [pc, #376]	; (8005828 <UART_SetConfig+0x2d4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d125      	bne.n	80056fe <UART_SetConfig+0x1aa>
 80056b2:	4b5b      	ldr	r3, [pc, #364]	; (8005820 <UART_SetConfig+0x2cc>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d016      	beq.n	80056ee <UART_SetConfig+0x19a>
 80056c0:	2b30      	cmp	r3, #48	; 0x30
 80056c2:	d818      	bhi.n	80056f6 <UART_SetConfig+0x1a2>
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d00a      	beq.n	80056de <UART_SetConfig+0x18a>
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d814      	bhi.n	80056f6 <UART_SetConfig+0x1a2>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <UART_SetConfig+0x182>
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d008      	beq.n	80056e6 <UART_SetConfig+0x192>
 80056d4:	e00f      	b.n	80056f6 <UART_SetConfig+0x1a2>
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056dc:	e0ad      	b.n	800583a <UART_SetConfig+0x2e6>
 80056de:	2302      	movs	r3, #2
 80056e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e4:	e0a9      	b.n	800583a <UART_SetConfig+0x2e6>
 80056e6:	2304      	movs	r3, #4
 80056e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ec:	e0a5      	b.n	800583a <UART_SetConfig+0x2e6>
 80056ee:	2308      	movs	r3, #8
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f4:	e0a1      	b.n	800583a <UART_SetConfig+0x2e6>
 80056f6:	2310      	movs	r3, #16
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fc:	e09d      	b.n	800583a <UART_SetConfig+0x2e6>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4a      	ldr	r2, [pc, #296]	; (800582c <UART_SetConfig+0x2d8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d125      	bne.n	8005754 <UART_SetConfig+0x200>
 8005708:	4b45      	ldr	r3, [pc, #276]	; (8005820 <UART_SetConfig+0x2cc>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005712:	2bc0      	cmp	r3, #192	; 0xc0
 8005714:	d016      	beq.n	8005744 <UART_SetConfig+0x1f0>
 8005716:	2bc0      	cmp	r3, #192	; 0xc0
 8005718:	d818      	bhi.n	800574c <UART_SetConfig+0x1f8>
 800571a:	2b80      	cmp	r3, #128	; 0x80
 800571c:	d00a      	beq.n	8005734 <UART_SetConfig+0x1e0>
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d814      	bhi.n	800574c <UART_SetConfig+0x1f8>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <UART_SetConfig+0x1d8>
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d008      	beq.n	800573c <UART_SetConfig+0x1e8>
 800572a:	e00f      	b.n	800574c <UART_SetConfig+0x1f8>
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e082      	b.n	800583a <UART_SetConfig+0x2e6>
 8005734:	2302      	movs	r3, #2
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573a:	e07e      	b.n	800583a <UART_SetConfig+0x2e6>
 800573c:	2304      	movs	r3, #4
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005742:	e07a      	b.n	800583a <UART_SetConfig+0x2e6>
 8005744:	2308      	movs	r3, #8
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e076      	b.n	800583a <UART_SetConfig+0x2e6>
 800574c:	2310      	movs	r3, #16
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e072      	b.n	800583a <UART_SetConfig+0x2e6>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a35      	ldr	r2, [pc, #212]	; (8005830 <UART_SetConfig+0x2dc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d12a      	bne.n	80057b4 <UART_SetConfig+0x260>
 800575e:	4b30      	ldr	r3, [pc, #192]	; (8005820 <UART_SetConfig+0x2cc>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576c:	d01a      	beq.n	80057a4 <UART_SetConfig+0x250>
 800576e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005772:	d81b      	bhi.n	80057ac <UART_SetConfig+0x258>
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d00c      	beq.n	8005794 <UART_SetConfig+0x240>
 800577a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577e:	d815      	bhi.n	80057ac <UART_SetConfig+0x258>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <UART_SetConfig+0x238>
 8005784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005788:	d008      	beq.n	800579c <UART_SetConfig+0x248>
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x258>
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005792:	e052      	b.n	800583a <UART_SetConfig+0x2e6>
 8005794:	2302      	movs	r3, #2
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579a:	e04e      	b.n	800583a <UART_SetConfig+0x2e6>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a2:	e04a      	b.n	800583a <UART_SetConfig+0x2e6>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057aa:	e046      	b.n	800583a <UART_SetConfig+0x2e6>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b2:	e042      	b.n	800583a <UART_SetConfig+0x2e6>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <UART_SetConfig+0x2c4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d13a      	bne.n	8005834 <UART_SetConfig+0x2e0>
 80057be:	4b18      	ldr	r3, [pc, #96]	; (8005820 <UART_SetConfig+0x2cc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057cc:	d01a      	beq.n	8005804 <UART_SetConfig+0x2b0>
 80057ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057d2:	d81b      	bhi.n	800580c <UART_SetConfig+0x2b8>
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d8:	d00c      	beq.n	80057f4 <UART_SetConfig+0x2a0>
 80057da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057de:	d815      	bhi.n	800580c <UART_SetConfig+0x2b8>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <UART_SetConfig+0x298>
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d008      	beq.n	80057fc <UART_SetConfig+0x2a8>
 80057ea:	e00f      	b.n	800580c <UART_SetConfig+0x2b8>
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e022      	b.n	800583a <UART_SetConfig+0x2e6>
 80057f4:	2302      	movs	r3, #2
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e01e      	b.n	800583a <UART_SetConfig+0x2e6>
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e01a      	b.n	800583a <UART_SetConfig+0x2e6>
 8005804:	2308      	movs	r3, #8
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580a:	e016      	b.n	800583a <UART_SetConfig+0x2e6>
 800580c:	2310      	movs	r3, #16
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005812:	e012      	b.n	800583a <UART_SetConfig+0x2e6>
 8005814:	efff69f3 	.word	0xefff69f3
 8005818:	40008000 	.word	0x40008000
 800581c:	40013800 	.word	0x40013800
 8005820:	40021000 	.word	0x40021000
 8005824:	40004400 	.word	0x40004400
 8005828:	40004800 	.word	0x40004800
 800582c:	40004c00 	.word	0x40004c00
 8005830:	40005000 	.word	0x40005000
 8005834:	2310      	movs	r3, #16
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a9f      	ldr	r2, [pc, #636]	; (8005abc <UART_SetConfig+0x568>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d17a      	bne.n	800593a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005848:	2b08      	cmp	r3, #8
 800584a:	d824      	bhi.n	8005896 <UART_SetConfig+0x342>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x300>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005879 	.word	0x08005879
 8005858:	08005897 	.word	0x08005897
 800585c:	08005881 	.word	0x08005881
 8005860:	08005897 	.word	0x08005897
 8005864:	08005887 	.word	0x08005887
 8005868:	08005897 	.word	0x08005897
 800586c:	08005897 	.word	0x08005897
 8005870:	08005897 	.word	0x08005897
 8005874:	0800588f 	.word	0x0800588f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fd ff6c 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 800587c:	61f8      	str	r0, [r7, #28]
        break;
 800587e:	e010      	b.n	80058a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b8f      	ldr	r3, [pc, #572]	; (8005ac0 <UART_SetConfig+0x56c>)
 8005882:	61fb      	str	r3, [r7, #28]
        break;
 8005884:	e00d      	b.n	80058a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005886:	f7fd fecd 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 800588a:	61f8      	str	r0, [r7, #28]
        break;
 800588c:	e009      	b.n	80058a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	61fb      	str	r3, [r7, #28]
        break;
 8005894:	e005      	b.n	80058a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80fb 	beq.w	8005aa0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d305      	bcc.n	80058c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d903      	bls.n	80058ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058cc:	e0e8      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2200      	movs	r2, #0
 80058d2:	461c      	mov	r4, r3
 80058d4:	4615      	mov	r5, r2
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	f04f 0300 	mov.w	r3, #0
 80058de:	022b      	lsls	r3, r5, #8
 80058e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058e4:	0222      	lsls	r2, r4, #8
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	6849      	ldr	r1, [r1, #4]
 80058ea:	0849      	lsrs	r1, r1, #1
 80058ec:	2000      	movs	r0, #0
 80058ee:	4688      	mov	r8, r1
 80058f0:	4681      	mov	r9, r0
 80058f2:	eb12 0a08 	adds.w	sl, r2, r8
 80058f6:	eb43 0b09 	adc.w	fp, r3, r9
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005908:	4650      	mov	r0, sl
 800590a:	4659      	mov	r1, fp
 800590c:	f7fa fcb8 	bl	8000280 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800591e:	d308      	bcc.n	8005932 <UART_SetConfig+0x3de>
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005926:	d204      	bcs.n	8005932 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e0b6      	b.n	8005aa0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005938:	e0b2      	b.n	8005aa0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005942:	d15e      	bne.n	8005a02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005948:	2b08      	cmp	r3, #8
 800594a:	d828      	bhi.n	800599e <UART_SetConfig+0x44a>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0x400>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005979 	.word	0x08005979
 8005958:	08005981 	.word	0x08005981
 800595c:	08005989 	.word	0x08005989
 8005960:	0800599f 	.word	0x0800599f
 8005964:	0800598f 	.word	0x0800598f
 8005968:	0800599f 	.word	0x0800599f
 800596c:	0800599f 	.word	0x0800599f
 8005970:	0800599f 	.word	0x0800599f
 8005974:	08005997 	.word	0x08005997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fd feec 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 800597c:	61f8      	str	r0, [r7, #28]
        break;
 800597e:	e014      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005980:	f7fd fefe 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8005984:	61f8      	str	r0, [r7, #28]
        break;
 8005986:	e010      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005988:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <UART_SetConfig+0x56c>)
 800598a:	61fb      	str	r3, [r7, #28]
        break;
 800598c:	e00d      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598e:	f7fd fe49 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005992:	61f8      	str	r0, [r7, #28]
        break;
 8005994:	e009      	b.n	80059aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599a:	61fb      	str	r3, [r7, #28]
        break;
 800599c:	e005      	b.n	80059aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d077      	beq.n	8005aa0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005a      	lsls	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b0f      	cmp	r3, #15
 80059ca:	d916      	bls.n	80059fa <UART_SetConfig+0x4a6>
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d2:	d212      	bcs.n	80059fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f023 030f 	bic.w	r3, r3, #15
 80059dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	8afb      	ldrh	r3, [r7, #22]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	8afa      	ldrh	r2, [r7, #22]
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	e052      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a00:	e04e      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d827      	bhi.n	8005a5a <UART_SetConfig+0x506>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x4bc>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	08005a5b 	.word	0x08005a5b
 8005a20:	08005a4b 	.word	0x08005a4b
 8005a24:	08005a5b 	.word	0x08005a5b
 8005a28:	08005a5b 	.word	0x08005a5b
 8005a2c:	08005a5b 	.word	0x08005a5b
 8005a30:	08005a53 	.word	0x08005a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fd fe8e 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8005a38:	61f8      	str	r0, [r7, #28]
        break;
 8005a3a:	e014      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7fd fea0 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8005a40:	61f8      	str	r0, [r7, #28]
        break;
 8005a42:	e010      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a44:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <UART_SetConfig+0x56c>)
 8005a46:	61fb      	str	r3, [r7, #28]
        break;
 8005a48:	e00d      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a4a:	f7fd fdeb 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005a4e:	61f8      	str	r0, [r7, #28]
        break;
 8005a50:	e009      	b.n	8005a66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a56:	61fb      	str	r3, [r7, #28]
        break;
 8005a58:	e005      	b.n	8005a66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a64:	bf00      	nop
    }

    if (pclk != 0U)
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d019      	beq.n	8005aa0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	085a      	lsrs	r2, r3, #1
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	441a      	add	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d909      	bls.n	8005a9a <UART_SetConfig+0x546>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d205      	bcs.n	8005a9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e002      	b.n	8005aa0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005aac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3728      	adds	r7, #40	; 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aba:	bf00      	nop
 8005abc:	40008000 	.word	0x40008000
 8005ac0:	00f42400 	.word	0x00f42400

08005ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01a      	beq.n	8005bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc2:	d10a      	bne.n	8005bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c18:	f7fc fca8 	bl	800256c <HAL_GetTick>
 8005c1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d10e      	bne.n	8005c4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f82d 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e023      	b.n	8005c92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d10e      	bne.n	8005c76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f817 	bl	8005c9a <UART_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e00d      	b.n	8005c92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b09c      	sub	sp, #112	; 0x70
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005caa:	e0a5      	b.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	f000 80a1 	beq.w	8005df8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb6:	f7fc fc59 	bl	800256c <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <UART_WaitOnFlagUntilTimeout+0x32>
 8005cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d13e      	bne.n	8005d4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	663b      	str	r3, [r7, #96]	; 0x60
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e067      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d04f      	beq.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d66:	d147      	bne.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
 8005d92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e6      	bne.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	613b      	str	r3, [r7, #16]
   return(result);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dc4:	623a      	str	r2, [r7, #32]
 8005dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	6a3a      	ldr	r2, [r7, #32]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e010      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f43f af4a 	beq.w	8005cac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3770      	adds	r7, #112	; 0x70
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <_ZdlPvj>:
 8005e22:	f000 b803 	b.w	8005e2c <_ZdlPv>

08005e26 <__cxa_pure_virtual>:
 8005e26:	b508      	push	{r3, lr}
 8005e28:	f000 f80e 	bl	8005e48 <_ZSt9terminatev>

08005e2c <_ZdlPv>:
 8005e2c:	f000 b84a 	b.w	8005ec4 <free>

08005e30 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005e30:	b508      	push	{r3, lr}
 8005e32:	4780      	blx	r0
 8005e34:	f000 f80d 	bl	8005e52 <abort>

08005e38 <_ZSt13get_terminatev>:
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <_ZSt13get_terminatev+0xc>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	f3bf 8f5b 	dmb	ish
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000001c 	.word	0x2000001c

08005e48 <_ZSt9terminatev>:
 8005e48:	b508      	push	{r3, lr}
 8005e4a:	f7ff fff5 	bl	8005e38 <_ZSt13get_terminatev>
 8005e4e:	f7ff ffef 	bl	8005e30 <_ZN10__cxxabiv111__terminateEPFvvE>

08005e52 <abort>:
 8005e52:	b508      	push	{r3, lr}
 8005e54:	2006      	movs	r0, #6
 8005e56:	f000 f9a9 	bl	80061ac <raise>
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	f7fc fa2c 	bl	80022b8 <_exit>

08005e60 <__errno>:
 8005e60:	4b01      	ldr	r3, [pc, #4]	; (8005e68 <__errno+0x8>)
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000020 	.word	0x20000020

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4d0d      	ldr	r5, [pc, #52]	; (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1b64      	subs	r4, r4, r5
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2600      	movs	r6, #0
 8005e78:	42a6      	cmp	r6, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4d0b      	ldr	r5, [pc, #44]	; (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	; (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f001 f866 	bl	8006f50 <_init>
 8005e84:	1b64      	subs	r4, r4, r5
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2600      	movs	r6, #0
 8005e8a:	42a6      	cmp	r6, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e94:	4798      	blx	r3
 8005e96:	3601      	adds	r6, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9e:	4798      	blx	r3
 8005ea0:	3601      	adds	r6, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	0800724c 	.word	0x0800724c
 8005ea8:	0800724c 	.word	0x0800724c
 8005eac:	0800724c 	.word	0x0800724c
 8005eb0:	08007254 	.word	0x08007254

08005eb4 <malloc>:
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <malloc+0xc>)
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f000 b88d 	b.w	8005fd8 <_malloc_r>
 8005ebe:	bf00      	nop
 8005ec0:	20000020 	.word	0x20000020

08005ec4 <free>:
 8005ec4:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <free+0xc>)
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f000 b819 	b.w	8005f00 <_free_r>
 8005ece:	bf00      	nop
 8005ed0:	20000020 	.word	0x20000020

08005ed4 <memcpy>:
 8005ed4:	440a      	add	r2, r1
 8005ed6:	4291      	cmp	r1, r2
 8005ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005edc:	d100      	bne.n	8005ee0 <memcpy+0xc>
 8005ede:	4770      	bx	lr
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eea:	4291      	cmp	r1, r2
 8005eec:	d1f9      	bne.n	8005ee2 <memcpy+0xe>
 8005eee:	bd10      	pop	{r4, pc}

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <_free_r>:
 8005f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f02:	2900      	cmp	r1, #0
 8005f04:	d044      	beq.n	8005f90 <_free_r+0x90>
 8005f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0a:	9001      	str	r0, [sp, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8005f12:	bfb8      	it	lt
 8005f14:	18e4      	addlt	r4, r4, r3
 8005f16:	f000 f995 	bl	8006244 <__malloc_lock>
 8005f1a:	4a1e      	ldr	r2, [pc, #120]	; (8005f94 <_free_r+0x94>)
 8005f1c:	9801      	ldr	r0, [sp, #4]
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	b933      	cbnz	r3, 8005f30 <_free_r+0x30>
 8005f22:	6063      	str	r3, [r4, #4]
 8005f24:	6014      	str	r4, [r2, #0]
 8005f26:	b003      	add	sp, #12
 8005f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f2c:	f000 b990 	b.w	8006250 <__malloc_unlock>
 8005f30:	42a3      	cmp	r3, r4
 8005f32:	d908      	bls.n	8005f46 <_free_r+0x46>
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	1961      	adds	r1, r4, r5
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	bf01      	itttt	eq
 8005f3c:	6819      	ldreq	r1, [r3, #0]
 8005f3e:	685b      	ldreq	r3, [r3, #4]
 8005f40:	1949      	addeq	r1, r1, r5
 8005f42:	6021      	streq	r1, [r4, #0]
 8005f44:	e7ed      	b.n	8005f22 <_free_r+0x22>
 8005f46:	461a      	mov	r2, r3
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	b10b      	cbz	r3, 8005f50 <_free_r+0x50>
 8005f4c:	42a3      	cmp	r3, r4
 8005f4e:	d9fa      	bls.n	8005f46 <_free_r+0x46>
 8005f50:	6811      	ldr	r1, [r2, #0]
 8005f52:	1855      	adds	r5, r2, r1
 8005f54:	42a5      	cmp	r5, r4
 8005f56:	d10b      	bne.n	8005f70 <_free_r+0x70>
 8005f58:	6824      	ldr	r4, [r4, #0]
 8005f5a:	4421      	add	r1, r4
 8005f5c:	1854      	adds	r4, r2, r1
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	6011      	str	r1, [r2, #0]
 8005f62:	d1e0      	bne.n	8005f26 <_free_r+0x26>
 8005f64:	681c      	ldr	r4, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	6053      	str	r3, [r2, #4]
 8005f6a:	4421      	add	r1, r4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	e7da      	b.n	8005f26 <_free_r+0x26>
 8005f70:	d902      	bls.n	8005f78 <_free_r+0x78>
 8005f72:	230c      	movs	r3, #12
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	e7d6      	b.n	8005f26 <_free_r+0x26>
 8005f78:	6825      	ldr	r5, [r4, #0]
 8005f7a:	1961      	adds	r1, r4, r5
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	bf04      	itt	eq
 8005f80:	6819      	ldreq	r1, [r3, #0]
 8005f82:	685b      	ldreq	r3, [r3, #4]
 8005f84:	6063      	str	r3, [r4, #4]
 8005f86:	bf04      	itt	eq
 8005f88:	1949      	addeq	r1, r1, r5
 8005f8a:	6021      	streq	r1, [r4, #0]
 8005f8c:	6054      	str	r4, [r2, #4]
 8005f8e:	e7ca      	b.n	8005f26 <_free_r+0x26>
 8005f90:	b003      	add	sp, #12
 8005f92:	bd30      	pop	{r4, r5, pc}
 8005f94:	200002d0 	.word	0x200002d0

08005f98 <sbrk_aligned>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4e0e      	ldr	r6, [pc, #56]	; (8005fd4 <sbrk_aligned+0x3c>)
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	6831      	ldr	r1, [r6, #0]
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	b911      	cbnz	r1, 8005faa <sbrk_aligned+0x12>
 8005fa4:	f000 f8ca 	bl	800613c <_sbrk_r>
 8005fa8:	6030      	str	r0, [r6, #0]
 8005faa:	4621      	mov	r1, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 f8c5 	bl	800613c <_sbrk_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	d00a      	beq.n	8005fcc <sbrk_aligned+0x34>
 8005fb6:	1cc4      	adds	r4, r0, #3
 8005fb8:	f024 0403 	bic.w	r4, r4, #3
 8005fbc:	42a0      	cmp	r0, r4
 8005fbe:	d007      	beq.n	8005fd0 <sbrk_aligned+0x38>
 8005fc0:	1a21      	subs	r1, r4, r0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f000 f8ba 	bl	800613c <_sbrk_r>
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d101      	bne.n	8005fd0 <sbrk_aligned+0x38>
 8005fcc:	f04f 34ff 	mov.w	r4, #4294967295
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	200002d4 	.word	0x200002d4

08005fd8 <_malloc_r>:
 8005fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	1ccd      	adds	r5, r1, #3
 8005fde:	f025 0503 	bic.w	r5, r5, #3
 8005fe2:	3508      	adds	r5, #8
 8005fe4:	2d0c      	cmp	r5, #12
 8005fe6:	bf38      	it	cc
 8005fe8:	250c      	movcc	r5, #12
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	4607      	mov	r7, r0
 8005fee:	db01      	blt.n	8005ff4 <_malloc_r+0x1c>
 8005ff0:	42a9      	cmp	r1, r5
 8005ff2:	d905      	bls.n	8006000 <_malloc_r+0x28>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	4e2e      	ldr	r6, [pc, #184]	; (80060bc <_malloc_r+0xe4>)
 8006002:	f000 f91f 	bl	8006244 <__malloc_lock>
 8006006:	6833      	ldr	r3, [r6, #0]
 8006008:	461c      	mov	r4, r3
 800600a:	bb34      	cbnz	r4, 800605a <_malloc_r+0x82>
 800600c:	4629      	mov	r1, r5
 800600e:	4638      	mov	r0, r7
 8006010:	f7ff ffc2 	bl	8005f98 <sbrk_aligned>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	4604      	mov	r4, r0
 8006018:	d14d      	bne.n	80060b6 <_malloc_r+0xde>
 800601a:	6834      	ldr	r4, [r6, #0]
 800601c:	4626      	mov	r6, r4
 800601e:	2e00      	cmp	r6, #0
 8006020:	d140      	bne.n	80060a4 <_malloc_r+0xcc>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	4631      	mov	r1, r6
 8006026:	4638      	mov	r0, r7
 8006028:	eb04 0803 	add.w	r8, r4, r3
 800602c:	f000 f886 	bl	800613c <_sbrk_r>
 8006030:	4580      	cmp	r8, r0
 8006032:	d13a      	bne.n	80060aa <_malloc_r+0xd2>
 8006034:	6821      	ldr	r1, [r4, #0]
 8006036:	3503      	adds	r5, #3
 8006038:	1a6d      	subs	r5, r5, r1
 800603a:	f025 0503 	bic.w	r5, r5, #3
 800603e:	3508      	adds	r5, #8
 8006040:	2d0c      	cmp	r5, #12
 8006042:	bf38      	it	cc
 8006044:	250c      	movcc	r5, #12
 8006046:	4629      	mov	r1, r5
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ffa5 	bl	8005f98 <sbrk_aligned>
 800604e:	3001      	adds	r0, #1
 8006050:	d02b      	beq.n	80060aa <_malloc_r+0xd2>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	442b      	add	r3, r5
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	e00e      	b.n	8006078 <_malloc_r+0xa0>
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	1b52      	subs	r2, r2, r5
 800605e:	d41e      	bmi.n	800609e <_malloc_r+0xc6>
 8006060:	2a0b      	cmp	r2, #11
 8006062:	d916      	bls.n	8006092 <_malloc_r+0xba>
 8006064:	1961      	adds	r1, r4, r5
 8006066:	42a3      	cmp	r3, r4
 8006068:	6025      	str	r5, [r4, #0]
 800606a:	bf18      	it	ne
 800606c:	6059      	strne	r1, [r3, #4]
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	bf08      	it	eq
 8006072:	6031      	streq	r1, [r6, #0]
 8006074:	5162      	str	r2, [r4, r5]
 8006076:	604b      	str	r3, [r1, #4]
 8006078:	4638      	mov	r0, r7
 800607a:	f104 060b 	add.w	r6, r4, #11
 800607e:	f000 f8e7 	bl	8006250 <__malloc_unlock>
 8006082:	f026 0607 	bic.w	r6, r6, #7
 8006086:	1d23      	adds	r3, r4, #4
 8006088:	1af2      	subs	r2, r6, r3
 800608a:	d0b6      	beq.n	8005ffa <_malloc_r+0x22>
 800608c:	1b9b      	subs	r3, r3, r6
 800608e:	50a3      	str	r3, [r4, r2]
 8006090:	e7b3      	b.n	8005ffa <_malloc_r+0x22>
 8006092:	6862      	ldr	r2, [r4, #4]
 8006094:	42a3      	cmp	r3, r4
 8006096:	bf0c      	ite	eq
 8006098:	6032      	streq	r2, [r6, #0]
 800609a:	605a      	strne	r2, [r3, #4]
 800609c:	e7ec      	b.n	8006078 <_malloc_r+0xa0>
 800609e:	4623      	mov	r3, r4
 80060a0:	6864      	ldr	r4, [r4, #4]
 80060a2:	e7b2      	b.n	800600a <_malloc_r+0x32>
 80060a4:	4634      	mov	r4, r6
 80060a6:	6876      	ldr	r6, [r6, #4]
 80060a8:	e7b9      	b.n	800601e <_malloc_r+0x46>
 80060aa:	230c      	movs	r3, #12
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	4638      	mov	r0, r7
 80060b0:	f000 f8ce 	bl	8006250 <__malloc_unlock>
 80060b4:	e7a1      	b.n	8005ffa <_malloc_r+0x22>
 80060b6:	6025      	str	r5, [r4, #0]
 80060b8:	e7de      	b.n	8006078 <_malloc_r+0xa0>
 80060ba:	bf00      	nop
 80060bc:	200002d0 	.word	0x200002d0

080060c0 <rand>:
 80060c0:	4b16      	ldr	r3, [pc, #88]	; (800611c <rand+0x5c>)
 80060c2:	b510      	push	{r4, lr}
 80060c4:	681c      	ldr	r4, [r3, #0]
 80060c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060c8:	b9b3      	cbnz	r3, 80060f8 <rand+0x38>
 80060ca:	2018      	movs	r0, #24
 80060cc:	f7ff fef2 	bl	8005eb4 <malloc>
 80060d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80060d2:	b928      	cbnz	r0, 80060e0 <rand+0x20>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <rand+0x60>)
 80060d8:	4812      	ldr	r0, [pc, #72]	; (8006124 <rand+0x64>)
 80060da:	214e      	movs	r1, #78	; 0x4e
 80060dc:	f000 f882 	bl	80061e4 <__assert_func>
 80060e0:	4a11      	ldr	r2, [pc, #68]	; (8006128 <rand+0x68>)
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <rand+0x6c>)
 80060e4:	e9c0 2300 	strd	r2, r3, [r0]
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <rand+0x70>)
 80060ea:	6083      	str	r3, [r0, #8]
 80060ec:	230b      	movs	r3, #11
 80060ee:	8183      	strh	r3, [r0, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	2300      	movs	r3, #0
 80060f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80060f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80060fa:	4a0e      	ldr	r2, [pc, #56]	; (8006134 <rand+0x74>)
 80060fc:	6920      	ldr	r0, [r4, #16]
 80060fe:	6963      	ldr	r3, [r4, #20]
 8006100:	490d      	ldr	r1, [pc, #52]	; (8006138 <rand+0x78>)
 8006102:	4342      	muls	r2, r0
 8006104:	fb01 2203 	mla	r2, r1, r3, r2
 8006108:	fba0 0101 	umull	r0, r1, r0, r1
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	eb42 0001 	adc.w	r0, r2, r1
 8006112:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006116:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800611a:	bd10      	pop	{r4, pc}
 800611c:	20000020 	.word	0x20000020
 8006120:	08007100 	.word	0x08007100
 8006124:	08007117 	.word	0x08007117
 8006128:	abcd330e 	.word	0xabcd330e
 800612c:	e66d1234 	.word	0xe66d1234
 8006130:	0005deec 	.word	0x0005deec
 8006134:	5851f42d 	.word	0x5851f42d
 8006138:	4c957f2d 	.word	0x4c957f2d

0800613c <_sbrk_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d06      	ldr	r5, [pc, #24]	; (8006158 <_sbrk_r+0x1c>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fc f92e 	bl	80023a8 <_sbrk>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_sbrk_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_sbrk_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200002d8 	.word	0x200002d8

0800615c <_raise_r>:
 800615c:	291f      	cmp	r1, #31
 800615e:	b538      	push	{r3, r4, r5, lr}
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	d904      	bls.n	8006170 <_raise_r+0x14>
 8006166:	2316      	movs	r3, #22
 8006168:	6003      	str	r3, [r0, #0]
 800616a:	f04f 30ff 	mov.w	r0, #4294967295
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006172:	b112      	cbz	r2, 800617a <_raise_r+0x1e>
 8006174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006178:	b94b      	cbnz	r3, 800618e <_raise_r+0x32>
 800617a:	4620      	mov	r0, r4
 800617c:	f000 f830 	bl	80061e0 <_getpid_r>
 8006180:	462a      	mov	r2, r5
 8006182:	4601      	mov	r1, r0
 8006184:	4620      	mov	r0, r4
 8006186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800618a:	f000 b817 	b.w	80061bc <_kill_r>
 800618e:	2b01      	cmp	r3, #1
 8006190:	d00a      	beq.n	80061a8 <_raise_r+0x4c>
 8006192:	1c59      	adds	r1, r3, #1
 8006194:	d103      	bne.n	800619e <_raise_r+0x42>
 8006196:	2316      	movs	r3, #22
 8006198:	6003      	str	r3, [r0, #0]
 800619a:	2001      	movs	r0, #1
 800619c:	e7e7      	b.n	800616e <_raise_r+0x12>
 800619e:	2400      	movs	r4, #0
 80061a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061a4:	4628      	mov	r0, r5
 80061a6:	4798      	blx	r3
 80061a8:	2000      	movs	r0, #0
 80061aa:	e7e0      	b.n	800616e <_raise_r+0x12>

080061ac <raise>:
 80061ac:	4b02      	ldr	r3, [pc, #8]	; (80061b8 <raise+0xc>)
 80061ae:	4601      	mov	r1, r0
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	f7ff bfd3 	b.w	800615c <_raise_r>
 80061b6:	bf00      	nop
 80061b8:	20000020 	.word	0x20000020

080061bc <_kill_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_kill_r+0x20>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	f7fc f865 	bl	8002298 <_kill>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d102      	bne.n	80061d8 <_kill_r+0x1c>
 80061d2:	682b      	ldr	r3, [r5, #0]
 80061d4:	b103      	cbz	r3, 80061d8 <_kill_r+0x1c>
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	bd38      	pop	{r3, r4, r5, pc}
 80061da:	bf00      	nop
 80061dc:	200002d8 	.word	0x200002d8

080061e0 <_getpid_r>:
 80061e0:	f7fc b852 	b.w	8002288 <_getpid>

080061e4 <__assert_func>:
 80061e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061e6:	4614      	mov	r4, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <__assert_func+0x2c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4605      	mov	r5, r0
 80061f0:	68d8      	ldr	r0, [r3, #12]
 80061f2:	b14c      	cbz	r4, 8006208 <__assert_func+0x24>
 80061f4:	4b07      	ldr	r3, [pc, #28]	; (8006214 <__assert_func+0x30>)
 80061f6:	9100      	str	r1, [sp, #0]
 80061f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061fc:	4906      	ldr	r1, [pc, #24]	; (8006218 <__assert_func+0x34>)
 80061fe:	462b      	mov	r3, r5
 8006200:	f000 f80e 	bl	8006220 <fiprintf>
 8006204:	f7ff fe25 	bl	8005e52 <abort>
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <__assert_func+0x38>)
 800620a:	461c      	mov	r4, r3
 800620c:	e7f3      	b.n	80061f6 <__assert_func+0x12>
 800620e:	bf00      	nop
 8006210:	20000020 	.word	0x20000020
 8006214:	08007172 	.word	0x08007172
 8006218:	0800717f 	.word	0x0800717f
 800621c:	080071ad 	.word	0x080071ad

08006220 <fiprintf>:
 8006220:	b40e      	push	{r1, r2, r3}
 8006222:	b503      	push	{r0, r1, lr}
 8006224:	4601      	mov	r1, r0
 8006226:	ab03      	add	r3, sp, #12
 8006228:	4805      	ldr	r0, [pc, #20]	; (8006240 <fiprintf+0x20>)
 800622a:	f853 2b04 	ldr.w	r2, [r3], #4
 800622e:	6800      	ldr	r0, [r0, #0]
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	f000 f83d 	bl	80062b0 <_vfiprintf_r>
 8006236:	b002      	add	sp, #8
 8006238:	f85d eb04 	ldr.w	lr, [sp], #4
 800623c:	b003      	add	sp, #12
 800623e:	4770      	bx	lr
 8006240:	20000020 	.word	0x20000020

08006244 <__malloc_lock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_lock+0x8>)
 8006246:	f000 bd6f 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 800624a:	bf00      	nop
 800624c:	200002dc 	.word	0x200002dc

08006250 <__malloc_unlock>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__malloc_unlock+0x8>)
 8006252:	f000 bd6a 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006256:	bf00      	nop
 8006258:	200002dc 	.word	0x200002dc

0800625c <__sfputc_r>:
 800625c:	6893      	ldr	r3, [r2, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	b410      	push	{r4}
 8006264:	6093      	str	r3, [r2, #8]
 8006266:	da08      	bge.n	800627a <__sfputc_r+0x1e>
 8006268:	6994      	ldr	r4, [r2, #24]
 800626a:	42a3      	cmp	r3, r4
 800626c:	db01      	blt.n	8006272 <__sfputc_r+0x16>
 800626e:	290a      	cmp	r1, #10
 8006270:	d103      	bne.n	800627a <__sfputc_r+0x1e>
 8006272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006276:	f000 badf 	b.w	8006838 <__swbuf_r>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	1c58      	adds	r0, r3, #1
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	7019      	strb	r1, [r3, #0]
 8006282:	4608      	mov	r0, r1
 8006284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006288:	4770      	bx	lr

0800628a <__sfputs_r>:
 800628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	4614      	mov	r4, r2
 8006292:	18d5      	adds	r5, r2, r3
 8006294:	42ac      	cmp	r4, r5
 8006296:	d101      	bne.n	800629c <__sfputs_r+0x12>
 8006298:	2000      	movs	r0, #0
 800629a:	e007      	b.n	80062ac <__sfputs_r+0x22>
 800629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a0:	463a      	mov	r2, r7
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ffda 	bl	800625c <__sfputc_r>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d1f3      	bne.n	8006294 <__sfputs_r+0xa>
 80062ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062b0 <_vfiprintf_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	460d      	mov	r5, r1
 80062b6:	b09d      	sub	sp, #116	; 0x74
 80062b8:	4614      	mov	r4, r2
 80062ba:	4698      	mov	r8, r3
 80062bc:	4606      	mov	r6, r0
 80062be:	b118      	cbz	r0, 80062c8 <_vfiprintf_r+0x18>
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_vfiprintf_r+0x18>
 80062c4:	f000 fc92 	bl	8006bec <__sinit>
 80062c8:	4b89      	ldr	r3, [pc, #548]	; (80064f0 <_vfiprintf_r+0x240>)
 80062ca:	429d      	cmp	r5, r3
 80062cc:	d11b      	bne.n	8006306 <_vfiprintf_r+0x56>
 80062ce:	6875      	ldr	r5, [r6, #4]
 80062d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d2:	07d9      	lsls	r1, r3, #31
 80062d4:	d405      	bmi.n	80062e2 <_vfiprintf_r+0x32>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	059a      	lsls	r2, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_vfiprintf_r+0x32>
 80062dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062de:	f000 fd23 	bl	8006d28 <__retarget_lock_acquire_recursive>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	071b      	lsls	r3, r3, #28
 80062e6:	d501      	bpl.n	80062ec <_vfiprintf_r+0x3c>
 80062e8:	692b      	ldr	r3, [r5, #16]
 80062ea:	b9eb      	cbnz	r3, 8006328 <_vfiprintf_r+0x78>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 faf4 	bl	80068dc <__swsetup_r>
 80062f4:	b1c0      	cbz	r0, 8006328 <_vfiprintf_r+0x78>
 80062f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f8:	07dc      	lsls	r4, r3, #31
 80062fa:	d50e      	bpl.n	800631a <_vfiprintf_r+0x6a>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	b01d      	add	sp, #116	; 0x74
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	4b7b      	ldr	r3, [pc, #492]	; (80064f4 <_vfiprintf_r+0x244>)
 8006308:	429d      	cmp	r5, r3
 800630a:	d101      	bne.n	8006310 <_vfiprintf_r+0x60>
 800630c:	68b5      	ldr	r5, [r6, #8]
 800630e:	e7df      	b.n	80062d0 <_vfiprintf_r+0x20>
 8006310:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <_vfiprintf_r+0x248>)
 8006312:	429d      	cmp	r5, r3
 8006314:	bf08      	it	eq
 8006316:	68f5      	ldreq	r5, [r6, #12]
 8006318:	e7da      	b.n	80062d0 <_vfiprintf_r+0x20>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	0598      	lsls	r0, r3, #22
 800631e:	d4ed      	bmi.n	80062fc <_vfiprintf_r+0x4c>
 8006320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006322:	f000 fd02 	bl	8006d2a <__retarget_lock_release_recursive>
 8006326:	e7e9      	b.n	80062fc <_vfiprintf_r+0x4c>
 8006328:	2300      	movs	r3, #0
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	2320      	movs	r3, #32
 800632e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006332:	f8cd 800c 	str.w	r8, [sp, #12]
 8006336:	2330      	movs	r3, #48	; 0x30
 8006338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064fc <_vfiprintf_r+0x24c>
 800633c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006340:	f04f 0901 	mov.w	r9, #1
 8006344:	4623      	mov	r3, r4
 8006346:	469a      	mov	sl, r3
 8006348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800634c:	b10a      	cbz	r2, 8006352 <_vfiprintf_r+0xa2>
 800634e:	2a25      	cmp	r2, #37	; 0x25
 8006350:	d1f9      	bne.n	8006346 <_vfiprintf_r+0x96>
 8006352:	ebba 0b04 	subs.w	fp, sl, r4
 8006356:	d00b      	beq.n	8006370 <_vfiprintf_r+0xc0>
 8006358:	465b      	mov	r3, fp
 800635a:	4622      	mov	r2, r4
 800635c:	4629      	mov	r1, r5
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff93 	bl	800628a <__sfputs_r>
 8006364:	3001      	adds	r0, #1
 8006366:	f000 80aa 	beq.w	80064be <_vfiprintf_r+0x20e>
 800636a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800636c:	445a      	add	r2, fp
 800636e:	9209      	str	r2, [sp, #36]	; 0x24
 8006370:	f89a 3000 	ldrb.w	r3, [sl]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80a2 	beq.w	80064be <_vfiprintf_r+0x20e>
 800637a:	2300      	movs	r3, #0
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006384:	f10a 0a01 	add.w	sl, sl, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	9307      	str	r3, [sp, #28]
 800638c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006390:	931a      	str	r3, [sp, #104]	; 0x68
 8006392:	4654      	mov	r4, sl
 8006394:	2205      	movs	r2, #5
 8006396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639a:	4858      	ldr	r0, [pc, #352]	; (80064fc <_vfiprintf_r+0x24c>)
 800639c:	f7f9 ff20 	bl	80001e0 <memchr>
 80063a0:	9a04      	ldr	r2, [sp, #16]
 80063a2:	b9d8      	cbnz	r0, 80063dc <_vfiprintf_r+0x12c>
 80063a4:	06d1      	lsls	r1, r2, #27
 80063a6:	bf44      	itt	mi
 80063a8:	2320      	movmi	r3, #32
 80063aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ae:	0713      	lsls	r3, r2, #28
 80063b0:	bf44      	itt	mi
 80063b2:	232b      	movmi	r3, #43	; 0x2b
 80063b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b8:	f89a 3000 	ldrb.w	r3, [sl]
 80063bc:	2b2a      	cmp	r3, #42	; 0x2a
 80063be:	d015      	beq.n	80063ec <_vfiprintf_r+0x13c>
 80063c0:	9a07      	ldr	r2, [sp, #28]
 80063c2:	4654      	mov	r4, sl
 80063c4:	2000      	movs	r0, #0
 80063c6:	f04f 0c0a 	mov.w	ip, #10
 80063ca:	4621      	mov	r1, r4
 80063cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d0:	3b30      	subs	r3, #48	; 0x30
 80063d2:	2b09      	cmp	r3, #9
 80063d4:	d94e      	bls.n	8006474 <_vfiprintf_r+0x1c4>
 80063d6:	b1b0      	cbz	r0, 8006406 <_vfiprintf_r+0x156>
 80063d8:	9207      	str	r2, [sp, #28]
 80063da:	e014      	b.n	8006406 <_vfiprintf_r+0x156>
 80063dc:	eba0 0308 	sub.w	r3, r0, r8
 80063e0:	fa09 f303 	lsl.w	r3, r9, r3
 80063e4:	4313      	orrs	r3, r2
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	46a2      	mov	sl, r4
 80063ea:	e7d2      	b.n	8006392 <_vfiprintf_r+0xe2>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	1d19      	adds	r1, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9103      	str	r1, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfbb      	ittet	lt
 80063f8:	425b      	neglt	r3, r3
 80063fa:	f042 0202 	orrlt.w	r2, r2, #2
 80063fe:	9307      	strge	r3, [sp, #28]
 8006400:	9307      	strlt	r3, [sp, #28]
 8006402:	bfb8      	it	lt
 8006404:	9204      	strlt	r2, [sp, #16]
 8006406:	7823      	ldrb	r3, [r4, #0]
 8006408:	2b2e      	cmp	r3, #46	; 0x2e
 800640a:	d10c      	bne.n	8006426 <_vfiprintf_r+0x176>
 800640c:	7863      	ldrb	r3, [r4, #1]
 800640e:	2b2a      	cmp	r3, #42	; 0x2a
 8006410:	d135      	bne.n	800647e <_vfiprintf_r+0x1ce>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	9203      	str	r2, [sp, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006422:	3402      	adds	r4, #2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800650c <_vfiprintf_r+0x25c>
 800642a:	7821      	ldrb	r1, [r4, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4650      	mov	r0, sl
 8006430:	f7f9 fed6 	bl	80001e0 <memchr>
 8006434:	b140      	cbz	r0, 8006448 <_vfiprintf_r+0x198>
 8006436:	2340      	movs	r3, #64	; 0x40
 8006438:	eba0 000a 	sub.w	r0, r0, sl
 800643c:	fa03 f000 	lsl.w	r0, r3, r0
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	4303      	orrs	r3, r0
 8006444:	3401      	adds	r4, #1
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644c:	482c      	ldr	r0, [pc, #176]	; (8006500 <_vfiprintf_r+0x250>)
 800644e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006452:	2206      	movs	r2, #6
 8006454:	f7f9 fec4 	bl	80001e0 <memchr>
 8006458:	2800      	cmp	r0, #0
 800645a:	d03f      	beq.n	80064dc <_vfiprintf_r+0x22c>
 800645c:	4b29      	ldr	r3, [pc, #164]	; (8006504 <_vfiprintf_r+0x254>)
 800645e:	bb1b      	cbnz	r3, 80064a8 <_vfiprintf_r+0x1f8>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	3307      	adds	r3, #7
 8006464:	f023 0307 	bic.w	r3, r3, #7
 8006468:	3308      	adds	r3, #8
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	443b      	add	r3, r7
 8006470:	9309      	str	r3, [sp, #36]	; 0x24
 8006472:	e767      	b.n	8006344 <_vfiprintf_r+0x94>
 8006474:	fb0c 3202 	mla	r2, ip, r2, r3
 8006478:	460c      	mov	r4, r1
 800647a:	2001      	movs	r0, #1
 800647c:	e7a5      	b.n	80063ca <_vfiprintf_r+0x11a>
 800647e:	2300      	movs	r3, #0
 8006480:	3401      	adds	r4, #1
 8006482:	9305      	str	r3, [sp, #20]
 8006484:	4619      	mov	r1, r3
 8006486:	f04f 0c0a 	mov.w	ip, #10
 800648a:	4620      	mov	r0, r4
 800648c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006490:	3a30      	subs	r2, #48	; 0x30
 8006492:	2a09      	cmp	r2, #9
 8006494:	d903      	bls.n	800649e <_vfiprintf_r+0x1ee>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0c5      	beq.n	8006426 <_vfiprintf_r+0x176>
 800649a:	9105      	str	r1, [sp, #20]
 800649c:	e7c3      	b.n	8006426 <_vfiprintf_r+0x176>
 800649e:	fb0c 2101 	mla	r1, ip, r1, r2
 80064a2:	4604      	mov	r4, r0
 80064a4:	2301      	movs	r3, #1
 80064a6:	e7f0      	b.n	800648a <_vfiprintf_r+0x1da>
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <_vfiprintf_r+0x258>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4630      	mov	r0, r6
 80064b4:	f3af 8000 	nop.w
 80064b8:	4607      	mov	r7, r0
 80064ba:	1c78      	adds	r0, r7, #1
 80064bc:	d1d6      	bne.n	800646c <_vfiprintf_r+0x1bc>
 80064be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064c0:	07d9      	lsls	r1, r3, #31
 80064c2:	d405      	bmi.n	80064d0 <_vfiprintf_r+0x220>
 80064c4:	89ab      	ldrh	r3, [r5, #12]
 80064c6:	059a      	lsls	r2, r3, #22
 80064c8:	d402      	bmi.n	80064d0 <_vfiprintf_r+0x220>
 80064ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064cc:	f000 fc2d 	bl	8006d2a <__retarget_lock_release_recursive>
 80064d0:	89ab      	ldrh	r3, [r5, #12]
 80064d2:	065b      	lsls	r3, r3, #25
 80064d4:	f53f af12 	bmi.w	80062fc <_vfiprintf_r+0x4c>
 80064d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064da:	e711      	b.n	8006300 <_vfiprintf_r+0x50>
 80064dc:	ab03      	add	r3, sp, #12
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <_vfiprintf_r+0x258>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 f880 	bl	80065ec <_printf_i>
 80064ec:	e7e4      	b.n	80064b8 <_vfiprintf_r+0x208>
 80064ee:	bf00      	nop
 80064f0:	08007204 	.word	0x08007204
 80064f4:	08007224 	.word	0x08007224
 80064f8:	080071e4 	.word	0x080071e4
 80064fc:	080071ae 	.word	0x080071ae
 8006500:	080071b8 	.word	0x080071b8
 8006504:	00000000 	.word	0x00000000
 8006508:	0800628b 	.word	0x0800628b
 800650c:	080071b4 	.word	0x080071b4

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4699      	mov	r9, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800655c:	1e13      	subs	r3, r2, #0
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656c:	4649      	mov	r1, r9
 800656e:	4638      	mov	r0, r7
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	68e5      	ldr	r5, [r4, #12]
 800657a:	6832      	ldr	r2, [r6, #0]
 800657c:	f003 0306 	and.w	r3, r3, #6
 8006580:	2b04      	cmp	r3, #4
 8006582:	bf08      	it	eq
 8006584:	1aad      	subeq	r5, r5, r2
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4649      	mov	r1, r9
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f4:	2f78      	cmp	r7, #120	; 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	; 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d8 	beq.w	80067be <_printf_i+0x1d2>
 800660e:	2f58      	cmp	r7, #88	; 0x58
 8006610:	f000 80a3 	beq.w	800675a <_printf_i+0x16e>
 8006614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	; (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	080067a5 	.word	0x080067a5
 800665c:	080066c9 	.word	0x080066c9
 8006660:	08006787 	.word	0x08006787
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067c7 	.word	0x080067c7
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c9 	.word	0x080066c9
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800678f 	.word	0x0800678f
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	602a      	str	r2, [r5, #0]
 800668c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e0a3      	b.n	80067e0 <_printf_i+0x1f4>
 8006698:	6820      	ldr	r0, [r4, #0]
 800669a:	6829      	ldr	r1, [r5, #0]
 800669c:	0606      	lsls	r6, r0, #24
 800669e:	f101 0304 	add.w	r3, r1, #4
 80066a2:	d50a      	bpl.n	80066ba <_printf_i+0xce>
 80066a4:	680e      	ldr	r6, [r1, #0]
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	da03      	bge.n	80066b4 <_printf_i+0xc8>
 80066ac:	232d      	movs	r3, #45	; 0x2d
 80066ae:	4276      	negs	r6, r6
 80066b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b4:	485e      	ldr	r0, [pc, #376]	; (8006830 <_printf_i+0x244>)
 80066b6:	230a      	movs	r3, #10
 80066b8:	e019      	b.n	80066ee <_printf_i+0x102>
 80066ba:	680e      	ldr	r6, [r1, #0]
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066c2:	bf18      	it	ne
 80066c4:	b236      	sxthne	r6, r6
 80066c6:	e7ef      	b.n	80066a8 <_printf_i+0xbc>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6820      	ldr	r0, [r4, #0]
 80066cc:	1d19      	adds	r1, r3, #4
 80066ce:	6029      	str	r1, [r5, #0]
 80066d0:	0601      	lsls	r1, r0, #24
 80066d2:	d501      	bpl.n	80066d8 <_printf_i+0xec>
 80066d4:	681e      	ldr	r6, [r3, #0]
 80066d6:	e002      	b.n	80066de <_printf_i+0xf2>
 80066d8:	0646      	lsls	r6, r0, #25
 80066da:	d5fb      	bpl.n	80066d4 <_printf_i+0xe8>
 80066dc:	881e      	ldrh	r6, [r3, #0]
 80066de:	4854      	ldr	r0, [pc, #336]	; (8006830 <_printf_i+0x244>)
 80066e0:	2f6f      	cmp	r7, #111	; 0x6f
 80066e2:	bf0c      	ite	eq
 80066e4:	2308      	moveq	r3, #8
 80066e6:	230a      	movne	r3, #10
 80066e8:	2100      	movs	r1, #0
 80066ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ee:	6865      	ldr	r5, [r4, #4]
 80066f0:	60a5      	str	r5, [r4, #8]
 80066f2:	2d00      	cmp	r5, #0
 80066f4:	bfa2      	ittt	ge
 80066f6:	6821      	ldrge	r1, [r4, #0]
 80066f8:	f021 0104 	bicge.w	r1, r1, #4
 80066fc:	6021      	strge	r1, [r4, #0]
 80066fe:	b90e      	cbnz	r6, 8006704 <_printf_i+0x118>
 8006700:	2d00      	cmp	r5, #0
 8006702:	d04d      	beq.n	80067a0 <_printf_i+0x1b4>
 8006704:	4615      	mov	r5, r2
 8006706:	fbb6 f1f3 	udiv	r1, r6, r3
 800670a:	fb03 6711 	mls	r7, r3, r1, r6
 800670e:	5dc7      	ldrb	r7, [r0, r7]
 8006710:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006714:	4637      	mov	r7, r6
 8006716:	42bb      	cmp	r3, r7
 8006718:	460e      	mov	r6, r1
 800671a:	d9f4      	bls.n	8006706 <_printf_i+0x11a>
 800671c:	2b08      	cmp	r3, #8
 800671e:	d10b      	bne.n	8006738 <_printf_i+0x14c>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07de      	lsls	r6, r3, #31
 8006724:	d508      	bpl.n	8006738 <_printf_i+0x14c>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4299      	cmp	r1, r3
 800672c:	bfde      	ittt	le
 800672e:	2330      	movle	r3, #48	; 0x30
 8006730:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006734:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006738:	1b52      	subs	r2, r2, r5
 800673a:	6122      	str	r2, [r4, #16]
 800673c:	f8cd a000 	str.w	sl, [sp]
 8006740:	464b      	mov	r3, r9
 8006742:	aa03      	add	r2, sp, #12
 8006744:	4621      	mov	r1, r4
 8006746:	4640      	mov	r0, r8
 8006748:	f7ff fee2 	bl	8006510 <_printf_common>
 800674c:	3001      	adds	r0, #1
 800674e:	d14c      	bne.n	80067ea <_printf_i+0x1fe>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	b004      	add	sp, #16
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	4835      	ldr	r0, [pc, #212]	; (8006830 <_printf_i+0x244>)
 800675c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006760:	6829      	ldr	r1, [r5, #0]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	f851 6b04 	ldr.w	r6, [r1], #4
 8006768:	6029      	str	r1, [r5, #0]
 800676a:	061d      	lsls	r5, r3, #24
 800676c:	d514      	bpl.n	8006798 <_printf_i+0x1ac>
 800676e:	07df      	lsls	r7, r3, #31
 8006770:	bf44      	itt	mi
 8006772:	f043 0320 	orrmi.w	r3, r3, #32
 8006776:	6023      	strmi	r3, [r4, #0]
 8006778:	b91e      	cbnz	r6, 8006782 <_printf_i+0x196>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f023 0320 	bic.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2310      	movs	r3, #16
 8006784:	e7b0      	b.n	80066e8 <_printf_i+0xfc>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	2378      	movs	r3, #120	; 0x78
 8006790:	4828      	ldr	r0, [pc, #160]	; (8006834 <_printf_i+0x248>)
 8006792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006796:	e7e3      	b.n	8006760 <_printf_i+0x174>
 8006798:	0659      	lsls	r1, r3, #25
 800679a:	bf48      	it	mi
 800679c:	b2b6      	uxthmi	r6, r6
 800679e:	e7e6      	b.n	800676e <_printf_i+0x182>
 80067a0:	4615      	mov	r5, r2
 80067a2:	e7bb      	b.n	800671c <_printf_i+0x130>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	6826      	ldr	r6, [r4, #0]
 80067a8:	6961      	ldr	r1, [r4, #20]
 80067aa:	1d18      	adds	r0, r3, #4
 80067ac:	6028      	str	r0, [r5, #0]
 80067ae:	0635      	lsls	r5, r6, #24
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	d501      	bpl.n	80067b8 <_printf_i+0x1cc>
 80067b4:	6019      	str	r1, [r3, #0]
 80067b6:	e002      	b.n	80067be <_printf_i+0x1d2>
 80067b8:	0670      	lsls	r0, r6, #25
 80067ba:	d5fb      	bpl.n	80067b4 <_printf_i+0x1c8>
 80067bc:	8019      	strh	r1, [r3, #0]
 80067be:	2300      	movs	r3, #0
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	4615      	mov	r5, r2
 80067c4:	e7ba      	b.n	800673c <_printf_i+0x150>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	602a      	str	r2, [r5, #0]
 80067cc:	681d      	ldr	r5, [r3, #0]
 80067ce:	6862      	ldr	r2, [r4, #4]
 80067d0:	2100      	movs	r1, #0
 80067d2:	4628      	mov	r0, r5
 80067d4:	f7f9 fd04 	bl	80001e0 <memchr>
 80067d8:	b108      	cbz	r0, 80067de <_printf_i+0x1f2>
 80067da:	1b40      	subs	r0, r0, r5
 80067dc:	6060      	str	r0, [r4, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	2300      	movs	r3, #0
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e8:	e7a8      	b.n	800673c <_printf_i+0x150>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	462a      	mov	r2, r5
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	47d0      	blx	sl
 80067f4:	3001      	adds	r0, #1
 80067f6:	d0ab      	beq.n	8006750 <_printf_i+0x164>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	079b      	lsls	r3, r3, #30
 80067fc:	d413      	bmi.n	8006826 <_printf_i+0x23a>
 80067fe:	68e0      	ldr	r0, [r4, #12]
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	4298      	cmp	r0, r3
 8006804:	bfb8      	it	lt
 8006806:	4618      	movlt	r0, r3
 8006808:	e7a4      	b.n	8006754 <_printf_i+0x168>
 800680a:	2301      	movs	r3, #1
 800680c:	4632      	mov	r2, r6
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d09b      	beq.n	8006750 <_printf_i+0x164>
 8006818:	3501      	adds	r5, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	9903      	ldr	r1, [sp, #12]
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	42ab      	cmp	r3, r5
 8006822:	dcf2      	bgt.n	800680a <_printf_i+0x21e>
 8006824:	e7eb      	b.n	80067fe <_printf_i+0x212>
 8006826:	2500      	movs	r5, #0
 8006828:	f104 0619 	add.w	r6, r4, #25
 800682c:	e7f5      	b.n	800681a <_printf_i+0x22e>
 800682e:	bf00      	nop
 8006830:	080071bf 	.word	0x080071bf
 8006834:	080071d0 	.word	0x080071d0

08006838 <__swbuf_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	460e      	mov	r6, r1
 800683c:	4614      	mov	r4, r2
 800683e:	4605      	mov	r5, r0
 8006840:	b118      	cbz	r0, 800684a <__swbuf_r+0x12>
 8006842:	6983      	ldr	r3, [r0, #24]
 8006844:	b90b      	cbnz	r3, 800684a <__swbuf_r+0x12>
 8006846:	f000 f9d1 	bl	8006bec <__sinit>
 800684a:	4b21      	ldr	r3, [pc, #132]	; (80068d0 <__swbuf_r+0x98>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d12b      	bne.n	80068a8 <__swbuf_r+0x70>
 8006850:	686c      	ldr	r4, [r5, #4]
 8006852:	69a3      	ldr	r3, [r4, #24]
 8006854:	60a3      	str	r3, [r4, #8]
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	071a      	lsls	r2, r3, #28
 800685a:	d52f      	bpl.n	80068bc <__swbuf_r+0x84>
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	b36b      	cbz	r3, 80068bc <__swbuf_r+0x84>
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1ac0      	subs	r0, r0, r3
 8006866:	6963      	ldr	r3, [r4, #20]
 8006868:	b2f6      	uxtb	r6, r6
 800686a:	4283      	cmp	r3, r0
 800686c:	4637      	mov	r7, r6
 800686e:	dc04      	bgt.n	800687a <__swbuf_r+0x42>
 8006870:	4621      	mov	r1, r4
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f926 	bl	8006ac4 <_fflush_r>
 8006878:	bb30      	cbnz	r0, 80068c8 <__swbuf_r+0x90>
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	3b01      	subs	r3, #1
 800687e:	60a3      	str	r3, [r4, #8]
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	6022      	str	r2, [r4, #0]
 8006886:	701e      	strb	r6, [r3, #0]
 8006888:	6963      	ldr	r3, [r4, #20]
 800688a:	3001      	adds	r0, #1
 800688c:	4283      	cmp	r3, r0
 800688e:	d004      	beq.n	800689a <__swbuf_r+0x62>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	07db      	lsls	r3, r3, #31
 8006894:	d506      	bpl.n	80068a4 <__swbuf_r+0x6c>
 8006896:	2e0a      	cmp	r6, #10
 8006898:	d104      	bne.n	80068a4 <__swbuf_r+0x6c>
 800689a:	4621      	mov	r1, r4
 800689c:	4628      	mov	r0, r5
 800689e:	f000 f911 	bl	8006ac4 <_fflush_r>
 80068a2:	b988      	cbnz	r0, 80068c8 <__swbuf_r+0x90>
 80068a4:	4638      	mov	r0, r7
 80068a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <__swbuf_r+0x9c>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <__swbuf_r+0x7a>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7cf      	b.n	8006852 <__swbuf_r+0x1a>
 80068b2:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <__swbuf_r+0xa0>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7ca      	b.n	8006852 <__swbuf_r+0x1a>
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f80c 	bl	80068dc <__swsetup_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d0cb      	beq.n	8006860 <__swbuf_r+0x28>
 80068c8:	f04f 37ff 	mov.w	r7, #4294967295
 80068cc:	e7ea      	b.n	80068a4 <__swbuf_r+0x6c>
 80068ce:	bf00      	nop
 80068d0:	08007204 	.word	0x08007204
 80068d4:	08007224 	.word	0x08007224
 80068d8:	080071e4 	.word	0x080071e4

080068dc <__swsetup_r>:
 80068dc:	4b32      	ldr	r3, [pc, #200]	; (80069a8 <__swsetup_r+0xcc>)
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	681d      	ldr	r5, [r3, #0]
 80068e2:	4606      	mov	r6, r0
 80068e4:	460c      	mov	r4, r1
 80068e6:	b125      	cbz	r5, 80068f2 <__swsetup_r+0x16>
 80068e8:	69ab      	ldr	r3, [r5, #24]
 80068ea:	b913      	cbnz	r3, 80068f2 <__swsetup_r+0x16>
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f97d 	bl	8006bec <__sinit>
 80068f2:	4b2e      	ldr	r3, [pc, #184]	; (80069ac <__swsetup_r+0xd0>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d10f      	bne.n	8006918 <__swsetup_r+0x3c>
 80068f8:	686c      	ldr	r4, [r5, #4]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006900:	0719      	lsls	r1, r3, #28
 8006902:	d42c      	bmi.n	800695e <__swsetup_r+0x82>
 8006904:	06dd      	lsls	r5, r3, #27
 8006906:	d411      	bmi.n	800692c <__swsetup_r+0x50>
 8006908:	2309      	movs	r3, #9
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	e03e      	b.n	8006996 <__swsetup_r+0xba>
 8006918:	4b25      	ldr	r3, [pc, #148]	; (80069b0 <__swsetup_r+0xd4>)
 800691a:	429c      	cmp	r4, r3
 800691c:	d101      	bne.n	8006922 <__swsetup_r+0x46>
 800691e:	68ac      	ldr	r4, [r5, #8]
 8006920:	e7eb      	b.n	80068fa <__swsetup_r+0x1e>
 8006922:	4b24      	ldr	r3, [pc, #144]	; (80069b4 <__swsetup_r+0xd8>)
 8006924:	429c      	cmp	r4, r3
 8006926:	bf08      	it	eq
 8006928:	68ec      	ldreq	r4, [r5, #12]
 800692a:	e7e6      	b.n	80068fa <__swsetup_r+0x1e>
 800692c:	0758      	lsls	r0, r3, #29
 800692e:	d512      	bpl.n	8006956 <__swsetup_r+0x7a>
 8006930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006932:	b141      	cbz	r1, 8006946 <__swsetup_r+0x6a>
 8006934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006938:	4299      	cmp	r1, r3
 800693a:	d002      	beq.n	8006942 <__swsetup_r+0x66>
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff fadf 	bl	8005f00 <_free_r>
 8006942:	2300      	movs	r3, #0
 8006944:	6363      	str	r3, [r4, #52]	; 0x34
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	2300      	movs	r3, #0
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	b94b      	cbnz	r3, 8006976 <__swsetup_r+0x9a>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d003      	beq.n	8006976 <__swsetup_r+0x9a>
 800696e:	4621      	mov	r1, r4
 8006970:	4630      	mov	r0, r6
 8006972:	f000 fa01 	bl	8006d78 <__smakebuf_r>
 8006976:	89a0      	ldrh	r0, [r4, #12]
 8006978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800697c:	f010 0301 	ands.w	r3, r0, #1
 8006980:	d00a      	beq.n	8006998 <__swsetup_r+0xbc>
 8006982:	2300      	movs	r3, #0
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	6963      	ldr	r3, [r4, #20]
 8006988:	425b      	negs	r3, r3
 800698a:	61a3      	str	r3, [r4, #24]
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b943      	cbnz	r3, 80069a2 <__swsetup_r+0xc6>
 8006990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006994:	d1ba      	bne.n	800690c <__swsetup_r+0x30>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	0781      	lsls	r1, r0, #30
 800699a:	bf58      	it	pl
 800699c:	6963      	ldrpl	r3, [r4, #20]
 800699e:	60a3      	str	r3, [r4, #8]
 80069a0:	e7f4      	b.n	800698c <__swsetup_r+0xb0>
 80069a2:	2000      	movs	r0, #0
 80069a4:	e7f7      	b.n	8006996 <__swsetup_r+0xba>
 80069a6:	bf00      	nop
 80069a8:	20000020 	.word	0x20000020
 80069ac:	08007204 	.word	0x08007204
 80069b0:	08007224 	.word	0x08007224
 80069b4:	080071e4 	.word	0x080071e4

080069b8 <__sflush_r>:
 80069b8:	898a      	ldrh	r2, [r1, #12]
 80069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	0710      	lsls	r0, r2, #28
 80069c2:	460c      	mov	r4, r1
 80069c4:	d458      	bmi.n	8006a78 <__sflush_r+0xc0>
 80069c6:	684b      	ldr	r3, [r1, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	dc05      	bgt.n	80069d8 <__sflush_r+0x20>
 80069cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dc02      	bgt.n	80069d8 <__sflush_r+0x20>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d0f9      	beq.n	80069d2 <__sflush_r+0x1a>
 80069de:	2300      	movs	r3, #0
 80069e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069e4:	682f      	ldr	r7, [r5, #0]
 80069e6:	602b      	str	r3, [r5, #0]
 80069e8:	d032      	beq.n	8006a50 <__sflush_r+0x98>
 80069ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	075a      	lsls	r2, r3, #29
 80069f0:	d505      	bpl.n	80069fe <__sflush_r+0x46>
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	1ac0      	subs	r0, r0, r3
 80069f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069f8:	b10b      	cbz	r3, 80069fe <__sflush_r+0x46>
 80069fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069fc:	1ac0      	subs	r0, r0, r3
 80069fe:	2300      	movs	r3, #0
 8006a00:	4602      	mov	r2, r0
 8006a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a04:	6a21      	ldr	r1, [r4, #32]
 8006a06:	4628      	mov	r0, r5
 8006a08:	47b0      	blx	r6
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	d106      	bne.n	8006a1e <__sflush_r+0x66>
 8006a10:	6829      	ldr	r1, [r5, #0]
 8006a12:	291d      	cmp	r1, #29
 8006a14:	d82c      	bhi.n	8006a70 <__sflush_r+0xb8>
 8006a16:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <__sflush_r+0x108>)
 8006a18:	40ca      	lsrs	r2, r1
 8006a1a:	07d6      	lsls	r6, r2, #31
 8006a1c:	d528      	bpl.n	8006a70 <__sflush_r+0xb8>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	6062      	str	r2, [r4, #4]
 8006a22:	04d9      	lsls	r1, r3, #19
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	6022      	str	r2, [r4, #0]
 8006a28:	d504      	bpl.n	8006a34 <__sflush_r+0x7c>
 8006a2a:	1c42      	adds	r2, r0, #1
 8006a2c:	d101      	bne.n	8006a32 <__sflush_r+0x7a>
 8006a2e:	682b      	ldr	r3, [r5, #0]
 8006a30:	b903      	cbnz	r3, 8006a34 <__sflush_r+0x7c>
 8006a32:	6560      	str	r0, [r4, #84]	; 0x54
 8006a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a36:	602f      	str	r7, [r5, #0]
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	d0ca      	beq.n	80069d2 <__sflush_r+0x1a>
 8006a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <__sflush_r+0x92>
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7ff fa5b 	bl	8005f00 <_free_r>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a4e:	e7c1      	b.n	80069d4 <__sflush_r+0x1c>
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	2301      	movs	r3, #1
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b0      	blx	r6
 8006a58:	1c41      	adds	r1, r0, #1
 8006a5a:	d1c7      	bne.n	80069ec <__sflush_r+0x34>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0c4      	beq.n	80069ec <__sflush_r+0x34>
 8006a62:	2b1d      	cmp	r3, #29
 8006a64:	d001      	beq.n	8006a6a <__sflush_r+0xb2>
 8006a66:	2b16      	cmp	r3, #22
 8006a68:	d101      	bne.n	8006a6e <__sflush_r+0xb6>
 8006a6a:	602f      	str	r7, [r5, #0]
 8006a6c:	e7b1      	b.n	80069d2 <__sflush_r+0x1a>
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	e7ad      	b.n	80069d4 <__sflush_r+0x1c>
 8006a78:	690f      	ldr	r7, [r1, #16]
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	d0a9      	beq.n	80069d2 <__sflush_r+0x1a>
 8006a7e:	0793      	lsls	r3, r2, #30
 8006a80:	680e      	ldr	r6, [r1, #0]
 8006a82:	bf08      	it	eq
 8006a84:	694b      	ldreq	r3, [r1, #20]
 8006a86:	600f      	str	r7, [r1, #0]
 8006a88:	bf18      	it	ne
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	eba6 0807 	sub.w	r8, r6, r7
 8006a90:	608b      	str	r3, [r1, #8]
 8006a92:	f1b8 0f00 	cmp.w	r8, #0
 8006a96:	dd9c      	ble.n	80069d2 <__sflush_r+0x1a>
 8006a98:	6a21      	ldr	r1, [r4, #32]
 8006a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a9c:	4643      	mov	r3, r8
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b0      	blx	r6
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dc06      	bgt.n	8006ab6 <__sflush_r+0xfe>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	e78e      	b.n	80069d4 <__sflush_r+0x1c>
 8006ab6:	4407      	add	r7, r0
 8006ab8:	eba8 0800 	sub.w	r8, r8, r0
 8006abc:	e7e9      	b.n	8006a92 <__sflush_r+0xda>
 8006abe:	bf00      	nop
 8006ac0:	20400001 	.word	0x20400001

08006ac4 <_fflush_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	b913      	cbnz	r3, 8006ad4 <_fflush_r+0x10>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	b118      	cbz	r0, 8006ade <_fflush_r+0x1a>
 8006ad6:	6983      	ldr	r3, [r0, #24]
 8006ad8:	b90b      	cbnz	r3, 8006ade <_fflush_r+0x1a>
 8006ada:	f000 f887 	bl	8006bec <__sinit>
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <_fflush_r+0x6c>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	d11b      	bne.n	8006b1c <_fflush_r+0x58>
 8006ae4:	686c      	ldr	r4, [r5, #4]
 8006ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0ef      	beq.n	8006ace <_fflush_r+0xa>
 8006aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006af0:	07d0      	lsls	r0, r2, #31
 8006af2:	d404      	bmi.n	8006afe <_fflush_r+0x3a>
 8006af4:	0599      	lsls	r1, r3, #22
 8006af6:	d402      	bmi.n	8006afe <_fflush_r+0x3a>
 8006af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006afa:	f000 f915 	bl	8006d28 <__retarget_lock_acquire_recursive>
 8006afe:	4628      	mov	r0, r5
 8006b00:	4621      	mov	r1, r4
 8006b02:	f7ff ff59 	bl	80069b8 <__sflush_r>
 8006b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b08:	07da      	lsls	r2, r3, #31
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	d4e0      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	059b      	lsls	r3, r3, #22
 8006b12:	d4dd      	bmi.n	8006ad0 <_fflush_r+0xc>
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f000 f908 	bl	8006d2a <__retarget_lock_release_recursive>
 8006b1a:	e7d9      	b.n	8006ad0 <_fflush_r+0xc>
 8006b1c:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <_fflush_r+0x70>)
 8006b1e:	429c      	cmp	r4, r3
 8006b20:	d101      	bne.n	8006b26 <_fflush_r+0x62>
 8006b22:	68ac      	ldr	r4, [r5, #8]
 8006b24:	e7df      	b.n	8006ae6 <_fflush_r+0x22>
 8006b26:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <_fflush_r+0x74>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	bf08      	it	eq
 8006b2c:	68ec      	ldreq	r4, [r5, #12]
 8006b2e:	e7da      	b.n	8006ae6 <_fflush_r+0x22>
 8006b30:	08007204 	.word	0x08007204
 8006b34:	08007224 	.word	0x08007224
 8006b38:	080071e4 	.word	0x080071e4

08006b3c <std>:
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4604      	mov	r4, r0
 8006b42:	e9c0 3300 	strd	r3, r3, [r0]
 8006b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b4a:	6083      	str	r3, [r0, #8]
 8006b4c:	8181      	strh	r1, [r0, #12]
 8006b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b50:	81c2      	strh	r2, [r0, #14]
 8006b52:	6183      	str	r3, [r0, #24]
 8006b54:	4619      	mov	r1, r3
 8006b56:	2208      	movs	r2, #8
 8006b58:	305c      	adds	r0, #92	; 0x5c
 8006b5a:	f7ff f9c9 	bl	8005ef0 <memset>
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <std+0x38>)
 8006b60:	6263      	str	r3, [r4, #36]	; 0x24
 8006b62:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <std+0x3c>)
 8006b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <std+0x40>)
 8006b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <std+0x44>)
 8006b6c:	6224      	str	r4, [r4, #32]
 8006b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08006df9 	.word	0x08006df9
 8006b78:	08006e1b 	.word	0x08006e1b
 8006b7c:	08006e53 	.word	0x08006e53
 8006b80:	08006e77 	.word	0x08006e77

08006b84 <_cleanup_r>:
 8006b84:	4901      	ldr	r1, [pc, #4]	; (8006b8c <_cleanup_r+0x8>)
 8006b86:	f000 b8af 	b.w	8006ce8 <_fwalk_reent>
 8006b8a:	bf00      	nop
 8006b8c:	08006ac5 	.word	0x08006ac5

08006b90 <__sfmoreglue>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	2268      	movs	r2, #104	; 0x68
 8006b94:	1e4d      	subs	r5, r1, #1
 8006b96:	4355      	muls	r5, r2
 8006b98:	460e      	mov	r6, r1
 8006b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b9e:	f7ff fa1b 	bl	8005fd8 <_malloc_r>
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	b140      	cbz	r0, 8006bb8 <__sfmoreglue+0x28>
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8006bac:	300c      	adds	r0, #12
 8006bae:	60a0      	str	r0, [r4, #8]
 8006bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bb4:	f7ff f99c 	bl	8005ef0 <memset>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	bd70      	pop	{r4, r5, r6, pc}

08006bbc <__sfp_lock_acquire>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__sfp_lock_acquire+0x8>)
 8006bbe:	f000 b8b3 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	200002dd 	.word	0x200002dd

08006bc8 <__sfp_lock_release>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__sfp_lock_release+0x8>)
 8006bca:	f000 b8ae 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	200002dd 	.word	0x200002dd

08006bd4 <__sinit_lock_acquire>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sinit_lock_acquire+0x8>)
 8006bd6:	f000 b8a7 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	200002de 	.word	0x200002de

08006be0 <__sinit_lock_release>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__sinit_lock_release+0x8>)
 8006be2:	f000 b8a2 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	200002de 	.word	0x200002de

08006bec <__sinit>:
 8006bec:	b510      	push	{r4, lr}
 8006bee:	4604      	mov	r4, r0
 8006bf0:	f7ff fff0 	bl	8006bd4 <__sinit_lock_acquire>
 8006bf4:	69a3      	ldr	r3, [r4, #24]
 8006bf6:	b11b      	cbz	r3, 8006c00 <__sinit+0x14>
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	f7ff bff0 	b.w	8006be0 <__sinit_lock_release>
 8006c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c04:	6523      	str	r3, [r4, #80]	; 0x50
 8006c06:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <__sinit+0x68>)
 8006c08:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <__sinit+0x6c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	bf04      	itt	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	61a3      	streq	r3, [r4, #24]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f820 	bl	8006c5c <__sfp>
 8006c1c:	6060      	str	r0, [r4, #4]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 f81c 	bl	8006c5c <__sfp>
 8006c24:	60a0      	str	r0, [r4, #8]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f818 	bl	8006c5c <__sfp>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	60e0      	str	r0, [r4, #12]
 8006c30:	2104      	movs	r1, #4
 8006c32:	6860      	ldr	r0, [r4, #4]
 8006c34:	f7ff ff82 	bl	8006b3c <std>
 8006c38:	68a0      	ldr	r0, [r4, #8]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	2109      	movs	r1, #9
 8006c3e:	f7ff ff7d 	bl	8006b3c <std>
 8006c42:	68e0      	ldr	r0, [r4, #12]
 8006c44:	2202      	movs	r2, #2
 8006c46:	2112      	movs	r1, #18
 8006c48:	f7ff ff78 	bl	8006b3c <std>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	61a3      	str	r3, [r4, #24]
 8006c50:	e7d2      	b.n	8006bf8 <__sinit+0xc>
 8006c52:	bf00      	nop
 8006c54:	080070fc 	.word	0x080070fc
 8006c58:	08006b85 	.word	0x08006b85

08006c5c <__sfp>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	4607      	mov	r7, r0
 8006c60:	f7ff ffac 	bl	8006bbc <__sfp_lock_acquire>
 8006c64:	4b1e      	ldr	r3, [pc, #120]	; (8006ce0 <__sfp+0x84>)
 8006c66:	681e      	ldr	r6, [r3, #0]
 8006c68:	69b3      	ldr	r3, [r6, #24]
 8006c6a:	b913      	cbnz	r3, 8006c72 <__sfp+0x16>
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff ffbd 	bl	8006bec <__sinit>
 8006c72:	3648      	adds	r6, #72	; 0x48
 8006c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	d503      	bpl.n	8006c84 <__sfp+0x28>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	b30b      	cbz	r3, 8006cc4 <__sfp+0x68>
 8006c80:	6836      	ldr	r6, [r6, #0]
 8006c82:	e7f7      	b.n	8006c74 <__sfp+0x18>
 8006c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c88:	b9d5      	cbnz	r5, 8006cc0 <__sfp+0x64>
 8006c8a:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <__sfp+0x88>)
 8006c8c:	60e3      	str	r3, [r4, #12]
 8006c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c92:	6665      	str	r5, [r4, #100]	; 0x64
 8006c94:	f000 f847 	bl	8006d26 <__retarget_lock_init_recursive>
 8006c98:	f7ff ff96 	bl	8006bc8 <__sfp_lock_release>
 8006c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ca4:	6025      	str	r5, [r4, #0]
 8006ca6:	61a5      	str	r5, [r4, #24]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	4629      	mov	r1, r5
 8006cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cb0:	f7ff f91e 	bl	8005ef0 <memset>
 8006cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc0:	3468      	adds	r4, #104	; 0x68
 8006cc2:	e7d9      	b.n	8006c78 <__sfp+0x1c>
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	f7ff ff62 	bl	8006b90 <__sfmoreglue>
 8006ccc:	4604      	mov	r4, r0
 8006cce:	6030      	str	r0, [r6, #0]
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d1d5      	bne.n	8006c80 <__sfp+0x24>
 8006cd4:	f7ff ff78 	bl	8006bc8 <__sfp_lock_release>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	e7ee      	b.n	8006cbc <__sfp+0x60>
 8006cde:	bf00      	nop
 8006ce0:	080070fc 	.word	0x080070fc
 8006ce4:	ffff0001 	.word	0xffff0001

08006ce8 <_fwalk_reent>:
 8006ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4606      	mov	r6, r0
 8006cee:	4688      	mov	r8, r1
 8006cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cf4:	2700      	movs	r7, #0
 8006cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8006cfe:	d505      	bpl.n	8006d0c <_fwalk_reent+0x24>
 8006d00:	6824      	ldr	r4, [r4, #0]
 8006d02:	2c00      	cmp	r4, #0
 8006d04:	d1f7      	bne.n	8006cf6 <_fwalk_reent+0xe>
 8006d06:	4638      	mov	r0, r7
 8006d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0c:	89ab      	ldrh	r3, [r5, #12]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d907      	bls.n	8006d22 <_fwalk_reent+0x3a>
 8006d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d16:	3301      	adds	r3, #1
 8006d18:	d003      	beq.n	8006d22 <_fwalk_reent+0x3a>
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	47c0      	blx	r8
 8006d20:	4307      	orrs	r7, r0
 8006d22:	3568      	adds	r5, #104	; 0x68
 8006d24:	e7e9      	b.n	8006cfa <_fwalk_reent+0x12>

08006d26 <__retarget_lock_init_recursive>:
 8006d26:	4770      	bx	lr

08006d28 <__retarget_lock_acquire_recursive>:
 8006d28:	4770      	bx	lr

08006d2a <__retarget_lock_release_recursive>:
 8006d2a:	4770      	bx	lr

08006d2c <__swhatbuf_r>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	460e      	mov	r6, r1
 8006d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	b096      	sub	sp, #88	; 0x58
 8006d38:	4614      	mov	r4, r2
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	da08      	bge.n	8006d50 <__swhatbuf_r+0x24>
 8006d3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	602a      	str	r2, [r5, #0]
 8006d46:	061a      	lsls	r2, r3, #24
 8006d48:	d410      	bmi.n	8006d6c <__swhatbuf_r+0x40>
 8006d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d4e:	e00e      	b.n	8006d6e <__swhatbuf_r+0x42>
 8006d50:	466a      	mov	r2, sp
 8006d52:	f000 f8b7 	bl	8006ec4 <_fstat_r>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	dbf1      	blt.n	8006d3e <__swhatbuf_r+0x12>
 8006d5a:	9a01      	ldr	r2, [sp, #4]
 8006d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d64:	425a      	negs	r2, r3
 8006d66:	415a      	adcs	r2, r3
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	e7ee      	b.n	8006d4a <__swhatbuf_r+0x1e>
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	2000      	movs	r0, #0
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	b016      	add	sp, #88	; 0x58
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d78 <__smakebuf_r>:
 8006d78:	898b      	ldrh	r3, [r1, #12]
 8006d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d7c:	079d      	lsls	r5, r3, #30
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	d507      	bpl.n	8006d94 <__smakebuf_r+0x1c>
 8006d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	6123      	str	r3, [r4, #16]
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	6163      	str	r3, [r4, #20]
 8006d90:	b002      	add	sp, #8
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	ab01      	add	r3, sp, #4
 8006d96:	466a      	mov	r2, sp
 8006d98:	f7ff ffc8 	bl	8006d2c <__swhatbuf_r>
 8006d9c:	9900      	ldr	r1, [sp, #0]
 8006d9e:	4605      	mov	r5, r0
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff f919 	bl	8005fd8 <_malloc_r>
 8006da6:	b948      	cbnz	r0, 8006dbc <__smakebuf_r+0x44>
 8006da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dac:	059a      	lsls	r2, r3, #22
 8006dae:	d4ef      	bmi.n	8006d90 <__smakebuf_r+0x18>
 8006db0:	f023 0303 	bic.w	r3, r3, #3
 8006db4:	f043 0302 	orr.w	r3, r3, #2
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	e7e3      	b.n	8006d84 <__smakebuf_r+0xc>
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <__smakebuf_r+0x7c>)
 8006dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	6020      	str	r0, [r4, #0]
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	9b00      	ldr	r3, [sp, #0]
 8006dcc:	6163      	str	r3, [r4, #20]
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	6120      	str	r0, [r4, #16]
 8006dd2:	b15b      	cbz	r3, 8006dec <__smakebuf_r+0x74>
 8006dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f000 f885 	bl	8006ee8 <_isatty_r>
 8006dde:	b128      	cbz	r0, 8006dec <__smakebuf_r+0x74>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	89a0      	ldrh	r0, [r4, #12]
 8006dee:	4305      	orrs	r5, r0
 8006df0:	81a5      	strh	r5, [r4, #12]
 8006df2:	e7cd      	b.n	8006d90 <__smakebuf_r+0x18>
 8006df4:	08006b85 	.word	0x08006b85

08006df8 <__sread>:
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e00:	f000 f894 	bl	8006f2c <_read_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	bfab      	itete	ge
 8006e08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e0c:	181b      	addge	r3, r3, r0
 8006e0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e12:	bfac      	ite	ge
 8006e14:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e16:	81a3      	strhlt	r3, [r4, #12]
 8006e18:	bd10      	pop	{r4, pc}

08006e1a <__swrite>:
 8006e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1e:	461f      	mov	r7, r3
 8006e20:	898b      	ldrh	r3, [r1, #12]
 8006e22:	05db      	lsls	r3, r3, #23
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	4616      	mov	r6, r2
 8006e2a:	d505      	bpl.n	8006e38 <__swrite+0x1e>
 8006e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e30:	2302      	movs	r3, #2
 8006e32:	2200      	movs	r2, #0
 8006e34:	f000 f868 	bl	8006f08 <_lseek_r>
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e42:	81a3      	strh	r3, [r4, #12]
 8006e44:	4632      	mov	r2, r6
 8006e46:	463b      	mov	r3, r7
 8006e48:	4628      	mov	r0, r5
 8006e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4e:	f000 b817 	b.w	8006e80 <_write_r>

08006e52 <__sseek>:
 8006e52:	b510      	push	{r4, lr}
 8006e54:	460c      	mov	r4, r1
 8006e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5a:	f000 f855 	bl	8006f08 <_lseek_r>
 8006e5e:	1c43      	adds	r3, r0, #1
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	bf15      	itete	ne
 8006e64:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e6e:	81a3      	strheq	r3, [r4, #12]
 8006e70:	bf18      	it	ne
 8006e72:	81a3      	strhne	r3, [r4, #12]
 8006e74:	bd10      	pop	{r4, pc}

08006e76 <__sclose>:
 8006e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7a:	f000 b813 	b.w	8006ea4 <_close_r>
	...

08006e80 <_write_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	4d07      	ldr	r5, [pc, #28]	; (8006ea0 <_write_r+0x20>)
 8006e84:	4604      	mov	r4, r0
 8006e86:	4608      	mov	r0, r1
 8006e88:	4611      	mov	r1, r2
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	602a      	str	r2, [r5, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f7fb fa39 	bl	8002306 <_write>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_write_r+0x1e>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_write_r+0x1e>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	200002d8 	.word	0x200002d8

08006ea4 <_close_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d06      	ldr	r5, [pc, #24]	; (8006ec0 <_close_r+0x1c>)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	f7fb fa45 	bl	800233e <_close>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_close_r+0x1a>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_close_r+0x1a>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	200002d8 	.word	0x200002d8

08006ec4 <_fstat_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	; (8006ee4 <_fstat_r+0x20>)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	f7fb fa40 	bl	8002356 <_fstat>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d102      	bne.n	8006ee0 <_fstat_r+0x1c>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	b103      	cbz	r3, 8006ee0 <_fstat_r+0x1c>
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	bf00      	nop
 8006ee4:	200002d8 	.word	0x200002d8

08006ee8 <_isatty_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d06      	ldr	r5, [pc, #24]	; (8006f04 <_isatty_r+0x1c>)
 8006eec:	2300      	movs	r3, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	f7fb fa3f 	bl	8002376 <_isatty>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_isatty_r+0x1a>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_isatty_r+0x1a>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	200002d8 	.word	0x200002d8

08006f08 <_lseek_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_lseek_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fb fa38 	bl	800238c <_lseek>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_lseek_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_lseek_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	200002d8 	.word	0x200002d8

08006f2c <_read_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	; (8006f4c <_read_r+0x20>)
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7fb f9c6 	bl	80022cc <_read>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_read_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_read_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	200002d8 	.word	0x200002d8

08006f50 <_init>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr

08006f5c <_fini>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr
